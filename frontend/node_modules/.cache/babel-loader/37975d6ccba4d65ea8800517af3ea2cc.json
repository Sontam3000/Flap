{"ast":null,"code":"'use client';\n\nimport React, { useState } from 'react';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ScrollAreaCorner } from './ScrollAreaCorner/ScrollAreaCorner.mjs';\nimport { ScrollAreaRoot } from './ScrollAreaRoot/ScrollAreaRoot.mjs';\nimport { ScrollAreaScrollbar } from './ScrollAreaScrollbar/ScrollAreaScrollbar.mjs';\nimport { ScrollAreaThumb } from './ScrollAreaThumb/ScrollAreaThumb.mjs';\nimport { ScrollAreaViewport } from './ScrollAreaViewport/ScrollAreaViewport.mjs';\nimport classes from './ScrollArea.module.css.mjs';\nconst defaultProps = {\n  scrollHideDelay: 1e3,\n  type: \"hover\",\n  scrollbars: \"xy\"\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    scrollbarSize\n  } = _ref;\n  return {\n    root: {\n      \"--scrollarea-scrollbar-size\": rem(scrollbarSize)\n    }\n  };\n});\nconst ScrollArea = factory((_props, ref) => {\n  const props = useProps(\"ScrollArea\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    scrollbarSize,\n    vars,\n    type,\n    scrollHideDelay,\n    viewportProps,\n    viewportRef,\n    onScrollPositionChange,\n    children,\n    offsetScrollbars,\n    scrollbars,\n    ...others\n  } = props;\n  const [scrollbarHovered, setScrollbarHovered] = useState(false);\n  const getStyles = useStyles({\n    name: \"ScrollArea\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(ScrollAreaRoot, {\n    type: type === \"never\" ? \"always\" : type,\n    scrollHideDelay,\n    ref,\n    scrollbars,\n    ...getStyles(\"root\"),\n    ...others\n  }, /* @__PURE__ */React.createElement(ScrollAreaViewport, {\n    ...viewportProps,\n    ...getStyles(\"viewport\", {\n      style: viewportProps === null || viewportProps === void 0 ? void 0 : viewportProps.style\n    }),\n    ref: viewportRef,\n    \"data-offset-scrollbars\": offsetScrollbars === true ? \"xy\" : offsetScrollbars || void 0,\n    \"data-scrollbars\": scrollbars || void 0,\n    onScroll: typeof onScrollPositionChange === \"function\" ? _ref2 => {\n      let {\n        currentTarget\n      } = _ref2;\n      return onScrollPositionChange({\n        x: currentTarget.scrollLeft,\n        y: currentTarget.scrollTop\n      });\n    } : void 0\n  }, children), (scrollbars === \"xy\" || scrollbars === \"x\") && /* @__PURE__ */React.createElement(ScrollAreaScrollbar, {\n    ...getStyles(\"scrollbar\"),\n    orientation: \"horizontal\",\n    \"data-hidden\": type === \"never\" || void 0,\n    forceMount: true,\n    onMouseEnter: () => setScrollbarHovered(true),\n    onMouseLeave: () => setScrollbarHovered(false)\n  }, /* @__PURE__ */React.createElement(ScrollAreaThumb, {\n    ...getStyles(\"thumb\")\n  })), (scrollbars === \"xy\" || scrollbars === \"y\") && /* @__PURE__ */React.createElement(ScrollAreaScrollbar, {\n    ...getStyles(\"scrollbar\"),\n    orientation: \"vertical\",\n    \"data-hidden\": type === \"never\" || void 0,\n    forceMount: true,\n    onMouseEnter: () => setScrollbarHovered(true),\n    onMouseLeave: () => setScrollbarHovered(false)\n  }, /* @__PURE__ */React.createElement(ScrollAreaThumb, {\n    ...getStyles(\"thumb\")\n  })), /* @__PURE__ */React.createElement(ScrollAreaCorner, {\n    ...getStyles(\"corner\"),\n    \"data-hovered\": scrollbarHovered || void 0,\n    \"data-hidden\": type === \"never\" || void 0\n  }));\n});\nScrollArea.displayName = \"@mantine/core/ScrollArea\";\nconst ScrollAreaAutosize = factory((props, ref) => {\n  const {\n    children,\n    classNames,\n    styles,\n    scrollbarSize,\n    scrollHideDelay,\n    type,\n    dir,\n    offsetScrollbars,\n    viewportRef,\n    onScrollPositionChange,\n    unstyled,\n    variant,\n    viewportProps,\n    scrollbars,\n    style,\n    vars,\n    ...others\n  } = useProps(\"ScrollAreaAutosize\", defaultProps, props);\n  return /* @__PURE__ */React.createElement(Box, {\n    ...others,\n    ref,\n    style: [{\n      display: \"flex\",\n      overflow: \"auto\"\n    }, style]\n  }, /* @__PURE__ */React.createElement(Box, {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flex: 1\n    }\n  }, /* @__PURE__ */React.createElement(ScrollArea, {\n    classNames,\n    styles,\n    scrollHideDelay,\n    scrollbarSize,\n    type,\n    dir,\n    offsetScrollbars,\n    viewportRef,\n    onScrollPositionChange,\n    unstyled,\n    variant,\n    viewportProps,\n    vars,\n    scrollbars\n  }, children)));\n});\nScrollArea.classes = classes;\nScrollAreaAutosize.displayName = \"@mantine/core/ScrollAreaAutosize\";\nScrollAreaAutosize.classes = classes;\nScrollArea.Autosize = ScrollAreaAutosize;\nexport { ScrollArea, ScrollAreaAutosize };","map":null,"metadata":{},"sourceType":"module"}