{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useIsomorphicEffect, assignRef } from '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nfunction createPortalNode(props) {\n  const node = document.createElement(\"div\");\n  node.setAttribute(\"data-portal\", \"true\");\n  typeof props.className === \"string\" && node.classList.add(...props.className.split(\" \").filter(Boolean));\n  typeof props.style === \"object\" && Object.assign(node.style, props.style);\n  typeof props.id === \"string\" && node.setAttribute(\"id\", props.id);\n  return node;\n}\nconst defaultProps = {};\nconst Portal = forwardRef((props, ref) => {\n  const {\n    children,\n    target,\n    ...others\n  } = useProps(\"Portal\", defaultProps, props);\n  const [mounted, setMounted] = useState(false);\n  const nodeRef = useRef(null);\n  useIsomorphicEffect(() => {\n    setMounted(true);\n    nodeRef.current = !target ? createPortalNode(others) : typeof target === \"string\" ? document.querySelector(target) : target;\n    assignRef(ref, nodeRef.current);\n    if (!target && nodeRef.current) {\n      document.body.appendChild(nodeRef.current);\n    }\n    return () => {\n      if (!target && nodeRef.current) {\n        document.body.removeChild(nodeRef.current);\n      }\n    };\n  }, [target]);\n  if (!mounted || !nodeRef.current) {\n    return null;\n  }\n  return createPortal( /* @__PURE__ */React.createElement(React.Fragment, null, children), nodeRef.current);\n});\nPortal.displayName = \"@mantine/core/Portal\";\nexport { Portal };","map":null,"metadata":{},"sourceType":"module"}