{"ast":null,"code":"'use client';\n\nimport { parseThemeColor } from '../../../../MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport '../../../../MantineProvider/Mantine.context.mjs';\nimport '../../../../MantineProvider/default-theme.mjs';\nimport '../../../../MantineProvider/MantineProvider.mjs';\nimport '../../../../MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nfunction colorResolver(color, theme) {\n  const parsedColor = parseThemeColor({\n    color,\n    theme\n  });\n  if (parsedColor.color === \"dimmed\") {\n    return \"var(--mantine-color-dimmed)\";\n  }\n  if (parsedColor.color === \"bright\") {\n    return \"var(--mantine-color-bright)\";\n  }\n  return parsedColor.variable ? \"var(\".concat(parsedColor.variable, \")\") : parsedColor.color;\n}\nfunction textColorResolver(color, theme) {\n  const parsedColor = parseThemeColor({\n    color,\n    theme\n  });\n  if (parsedColor.isThemeColor && parsedColor.shade === void 0) {\n    return \"var(--mantine-color-\".concat(parsedColor.color, \"-text)\");\n  }\n  return colorResolver(color, theme);\n}\nexport { colorResolver, textColorResolver };","map":null,"metadata":{},"sourceType":"module"}