{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { getFontSize, getLineHeight } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getGradient } from '../../core/MantineProvider/color-functions/get-gradient/get-gradient.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { polymorphicFactory } from '../../core/factory/polymorphic-factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Text.module.css.mjs';\nfunction getTextTruncate(truncate) {\n  if (truncate === \"start\") {\n    return \"start\";\n  }\n  if (truncate === \"end\" || truncate) {\n    return \"end\";\n  }\n  return void 0;\n}\nconst defaultProps = {\n  inherit: false\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    variant,\n    lineClamp,\n    gradient,\n    size,\n    color\n  } = _ref;\n  return {\n    root: {\n      \"--text-fz\": getFontSize(size),\n      \"--text-lh\": getLineHeight(size),\n      \"--text-gradient\": variant === \"gradient\" ? getGradient(gradient, theme) : void 0,\n      \"--text-line-clamp\": typeof lineClamp === \"number\" ? lineClamp.toString() : void 0,\n      \"--text-color\": color ? getThemeColor(color, theme) : void 0\n    }\n  };\n});\nconst Text = polymorphicFactory((_props, ref) => {\n  const props = useProps(\"Text\", defaultProps, _props);\n  const {\n    lineClamp,\n    truncate,\n    inline,\n    inherit,\n    gradient,\n    span,\n    __staticSelector,\n    vars,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    mod,\n    size,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: [\"Text\", __staticSelector],\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\", {\n      focusable: true\n    }),\n    ref,\n    component: span ? \"span\" : \"p\",\n    variant,\n    mod: [{\n      \"data-truncate\": getTextTruncate(truncate),\n      \"data-line-clamp\": typeof lineClamp === \"number\",\n      \"data-inline\": inline,\n      \"data-inherit\": inherit\n    }, mod],\n    size,\n    ...others\n  });\n});\nText.classes = classes;\nText.displayName = \"@mantine/core/Text\";\nexport { Text };","map":null,"metadata":{},"sourceType":"module"}