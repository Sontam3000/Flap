{"ast":null,"code":"'use client';\n\nfunction transformModKey(key) {\n  return key.startsWith(\"data-\") ? key : \"data-\".concat(key);\n}\nfunction getMod(props) {\n  return Object.keys(props).reduce((acc, key) => {\n    const value = props[key];\n    if (value === void 0 || value === \"\" || value === false || value === null) {\n      return acc;\n    }\n    acc[transformModKey(key)] = props[key];\n    return acc;\n  }, {});\n}\nfunction getBoxMod(mod) {\n  if (!mod) {\n    return null;\n  }\n  if (typeof mod === \"string\") {\n    return {\n      [transformModKey(mod)]: true\n    };\n  }\n  if (Array.isArray(mod)) {\n    return [...mod].reduce((acc, value) => ({\n      ...acc,\n      ...getBoxMod(value)\n    }), {});\n  }\n  return getMod(mod);\n}\nexport { getBoxMod, getMod };","map":null,"metadata":{},"sourceType":"module"}