{"ast":null,"code":"'use client';\n\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade.mjs';\nimport { isLightColor } from '../luminance/luminance.mjs';\nfunction parseThemeColor(_ref) {\n  let {\n    color,\n    theme,\n    colorScheme\n  } = _ref;\n  if (typeof color !== \"string\") {\n    throw new Error(\"[@mantine/core] Failed to parse color. Expected color to be a string, instead got \".concat(typeof color));\n  }\n  if (color === \"bright\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-bright\"\n    };\n  }\n  if (color === \"dimmed\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[6], theme.luminanceThreshold),\n      variable: \"--mantine-color-dimmed\"\n    };\n  }\n  if (color === \"white\" || color === \"black\") {\n    return {\n      color,\n      value: color === \"white\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(color === \"white\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-\".concat(color)\n    };\n  }\n  const [_color, shade] = color.split(\".\");\n  const colorShade = shade ? Number(shade) : void 0;\n  const isThemeColor = (_color in theme.colors);\n  if (isThemeColor) {\n    const colorValue = colorShade !== void 0 ? theme.colors[_color][colorShade] : theme.colors[_color][getPrimaryShade(theme, colorScheme || \"light\")];\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade ? \"--mantine-color-\".concat(_color, \"-\").concat(colorShade) : \"--mantine-color-\".concat(_color, \"-filled\")\n    };\n  }\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: void 0\n  };\n}\nexport { parseThemeColor };","map":null,"metadata":{},"sourceType":"module"}