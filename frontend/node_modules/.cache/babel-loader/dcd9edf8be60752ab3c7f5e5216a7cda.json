{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport cx from 'clsx';\nimport '../../Checkbox/Checkbox.mjs';\nimport '../../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../../Checkbox/CheckIcon.mjs';\nimport { ScrollArea } from '../../ScrollArea/ScrollArea.mjs';\nimport { Combobox } from '../Combobox.mjs';\nimport { defaultOptionsFilter } from './default-options-filter.mjs';\nimport { isEmptyComboboxData } from './is-empty-combobox-data.mjs';\nimport { isOptionsGroup } from './is-options-group.mjs';\nimport { validateOptions } from './validate-options.mjs';\nimport classes from '../Combobox.module.css.mjs';\nfunction isValueChecked(value, optionValue) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\nfunction Option(_ref) {\n  let {\n    data,\n    withCheckIcon,\n    value,\n    checkIconPosition,\n    unstyled\n  } = _ref;\n  if (!isOptionsGroup(data)) {\n    const check = withCheckIcon && isValueChecked(value, data.value) && /* @__PURE__ */React.createElement(CheckIcon, {\n      className: classes.optionsDropdownCheckIcon\n    });\n    return /* @__PURE__ */React.createElement(Combobox.Option, {\n      value: data.value,\n      disabled: data.disabled,\n      className: cx({\n        [classes.optionsDropdownOption]: !unstyled\n      }),\n      \"data-reverse\": checkIconPosition === \"right\" || void 0,\n      \"data-checked\": isValueChecked(value, data.value) || void 0,\n      \"aria-selected\": isValueChecked(value, data.value),\n      active: isValueChecked(value, data.value)\n    }, checkIconPosition === \"left\" && check, /* @__PURE__ */React.createElement(\"span\", null, data.label), checkIconPosition === \"right\" && check);\n  }\n  const options = data.items.map(item => /* @__PURE__ */React.createElement(Option, {\n    data: item,\n    value,\n    key: item.value,\n    unstyled,\n    withCheckIcon,\n    checkIconPosition\n  }));\n  return /* @__PURE__ */React.createElement(Combobox.Group, {\n    label: data.group\n  }, options);\n}\nfunction OptionsDropdown(_ref2) {\n  let {\n    data,\n    hidden,\n    hiddenWhenEmpty,\n    filter,\n    search,\n    limit,\n    maxDropdownHeight,\n    withScrollArea = true,\n    filterOptions = true,\n    withCheckIcon = false,\n    value,\n    checkIconPosition,\n    nothingFoundMessage,\n    unstyled,\n    labelId\n  } = _ref2;\n  validateOptions(data);\n  const shouldFilter = typeof search === \"string\";\n  const filteredData = shouldFilter ? (filter || defaultOptionsFilter)({\n    options: data,\n    search: filterOptions ? search : \"\",\n    limit: limit !== null && limit !== void 0 ? limit : Infinity\n  }) : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n  const options = filteredData.map(item => /* @__PURE__ */React.createElement(Option, {\n    data: item,\n    key: isOptionsGroup(item) ? item.group : item.value,\n    withCheckIcon,\n    value,\n    checkIconPosition,\n    unstyled\n  }));\n  return /* @__PURE__ */React.createElement(Combobox.Dropdown, {\n    hidden: hidden || hiddenWhenEmpty && isEmpty\n  }, /* @__PURE__ */React.createElement(Combobox.Options, {\n    labelledBy: labelId\n  }, withScrollArea ? /* @__PURE__ */React.createElement(ScrollArea.Autosize, {\n    mah: maxDropdownHeight !== null && maxDropdownHeight !== void 0 ? maxDropdownHeight : 220,\n    type: \"scroll\",\n    scrollbarSize: \"var(--_combobox-padding)\",\n    offsetScrollbars: \"y\"\n  }, options) : options, isEmpty && nothingFoundMessage && /* @__PURE__ */React.createElement(Combobox.Empty, null, nothingFoundMessage)));\n}\nexport { OptionsDropdown };","map":null,"metadata":{},"sourceType":"module"}