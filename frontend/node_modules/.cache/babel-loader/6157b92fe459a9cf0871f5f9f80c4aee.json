{"ast":null,"code":"'use client';\n\nimport React, { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../../core/utils/is-element/is-element.mjs';\nimport { getDefaultZIndex } from '../../../core/utils/get-default-z-index/get-default-z-index.mjs';\nimport { getRadius } from '../../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { getStyleObject } from '../../../core/Box/get-style-object/get-style-object.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../../Portal/Portal.mjs';\nimport { OptionalPortal } from '../../Portal/OptionalPortal.mjs';\nimport { useFloatingTooltip } from './use-floating-tooltip.mjs';\nimport classes from '../Tooltip.module.css.mjs';\nconst defaultProps = {\n  refProp: \"ref\",\n  withinPortal: true,\n  offset: 10,\n  position: \"right\",\n  zIndex: getDefaultZIndex(\"popover\")\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    radius,\n    color\n  } = _ref;\n  return {\n    tooltip: {\n      \"--tooltip-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--tooltip-bg\": color ? getThemeColor(color, theme) : void 0,\n      \"--tooltip-color\": color ? \"var(--mantine-color-white)\" : void 0\n    }\n  };\n});\nconst TooltipFloating = factory((_props, ref) => {\n  var _ref2, _ref3;\n  const props = useProps(\"TooltipFloating\", defaultProps, _props);\n  const {\n    children,\n    refProp,\n    withinPortal,\n    style,\n    className,\n    classNames,\n    styles,\n    unstyled,\n    radius,\n    color,\n    label,\n    offset,\n    position,\n    multiline,\n    zIndex,\n    disabled,\n    variant,\n    vars,\n    portalProps,\n    ...others\n  } = props;\n  const theme = useMantineTheme();\n  const getStyles = useStyles({\n    name: \"TooltipFloating\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"tooltip\",\n    vars,\n    varsResolver\n  });\n  const {\n    handleMouseMove,\n    x,\n    y,\n    opened,\n    boundaryRef,\n    floating,\n    setOpened\n  } = useFloatingTooltip({\n    offset,\n    position\n  });\n  if (!isElement(children)) {\n    throw new Error(\"[@mantine/core] Tooltip.Floating component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const targetRef = useMergedRef(boundaryRef, children.ref, ref);\n  const onMouseEnter = event => {\n    var _children$props$onMou, _children$props;\n    (_children$props$onMou = (_children$props = children.props).onMouseEnter) === null || _children$props$onMou === void 0 ? void 0 : _children$props$onMou.call(_children$props, event);\n    handleMouseMove(event);\n    setOpened(true);\n  };\n  const onMouseLeave = event => {\n    var _children$props$onMou2, _children$props2;\n    (_children$props$onMou2 = (_children$props2 = children.props).onMouseLeave) === null || _children$props$onMou2 === void 0 ? void 0 : _children$props$onMou2.call(_children$props2, event);\n    setOpened(false);\n  };\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(OptionalPortal, {\n    ...portalProps,\n    withinPortal\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...others,\n    ...getStyles(\"tooltip\", {\n      style: {\n        ...getStyleObject(style, theme),\n        zIndex,\n        display: !disabled && opened ? \"block\" : \"none\",\n        top: (_ref2 = y && Math.round(y)) !== null && _ref2 !== void 0 ? _ref2 : \"\",\n        left: (_ref3 = x && Math.round(x)) !== null && _ref3 !== void 0 ? _ref3 : \"\"\n      }\n    }),\n    variant,\n    ref: floating,\n    mod: {\n      multiline\n    }\n  }, label)), cloneElement(children, {\n    ...children.props,\n    [refProp]: targetRef,\n    onMouseEnter,\n    onMouseLeave\n  }));\n});\nTooltipFloating.classes = classes;\nTooltipFloating.displayName = \"@mantine/core/TooltipFloating\";\nexport { TooltipFloating };","map":null,"metadata":{},"sourceType":"module"}