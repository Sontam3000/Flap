{"ast":null,"code":"'use client';\n\nimport React, { useRef, useState } from 'react';\nimport { useId, useUncontrolled, useMergedRef, clamp } from '@mantine/hooks';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport { useDirection } from '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { RatingProvider } from './Rating.context.mjs';\nimport { RatingItem } from './RatingItem/RatingItem.mjs';\nimport classes from './Rating.module.css.mjs';\nfunction roundValueTo(value, to) {\n  var _split$;\n  const rounded = Math.round(value / to) * to;\n  const precision = ((_split$ = \"\".concat(to).split(\".\")[1]) === null || _split$ === void 0 ? void 0 : _split$.length) || 0;\n  return Number(rounded.toFixed(precision));\n}\nconst defaultProps = {\n  size: \"sm\",\n  getSymbolLabel: value => \"\".concat(value),\n  count: 5,\n  fractions: 1,\n  color: \"yellow\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    color\n  } = _ref;\n  return {\n    root: {\n      \"--rating-size\": getSize(size, \"rating-size\"),\n      \"--rating-color\": getThemeColor(color, theme)\n    }\n  };\n});\nconst Rating = factory((_props, ref) => {\n  const props = useProps(\"Rating\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    name,\n    id,\n    value,\n    defaultValue,\n    onChange,\n    fractions,\n    count,\n    onMouseEnter,\n    readOnly,\n    onMouseMove,\n    onHover,\n    onMouseLeave,\n    onTouchStart,\n    onTouchEnd,\n    size,\n    variant,\n    getSymbolLabel,\n    color,\n    emptySymbol,\n    fullSymbol,\n    highlightSelectedOnly,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Rating\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    dir\n  } = useDirection();\n  const _name = useId(name);\n  const _id = useId(id);\n  const rootRef = useRef(null);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: 0,\n    onChange\n  });\n  const [hovered, setHovered] = useState(-1);\n  const [isOutside, setOutside] = useState(true);\n  const _fractions = Math.floor(fractions);\n  const _count = Math.floor(count);\n  const decimalUnit = 1 / _fractions;\n  const stableValueRounded = roundValueTo(_value, decimalUnit);\n  const finalValue = hovered !== -1 ? hovered : stableValueRounded;\n  const getRatingFromCoordinates = x => {\n    const {\n      left,\n      right,\n      width\n    } = rootRef.current.getBoundingClientRect();\n    const symbolWidth = width / _count;\n    const hoverPosition = dir === \"rtl\" ? right - x : x - left;\n    const hoverValue = hoverPosition / symbolWidth;\n    return clamp(roundValueTo(hoverValue + decimalUnit / 2, decimalUnit), decimalUnit, _count);\n  };\n  const handleMouseEnter = event => {\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n    !readOnly && setOutside(false);\n  };\n  const handleMouseMove = event => {\n    onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(event);\n    if (readOnly) {\n      return;\n    }\n    const rounded = getRatingFromCoordinates(event.clientX);\n    setHovered(rounded);\n    rounded !== hovered && (onHover === null || onHover === void 0 ? void 0 : onHover(rounded));\n  };\n  const handleMouseLeave = event => {\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);\n    if (readOnly) {\n      return;\n    }\n    setHovered(-1);\n    setOutside(true);\n    hovered !== -1 && (onHover === null || onHover === void 0 ? void 0 : onHover(-1));\n  };\n  const handleTouchStart = event => {\n    event.preventDefault();\n    const {\n      touches\n    } = event;\n    if (touches.length !== 1) {\n      return;\n    }\n    const touch = touches[0];\n    setValue(getRatingFromCoordinates(touch.clientX));\n    onTouchStart === null || onTouchStart === void 0 ? void 0 : onTouchStart(event);\n  };\n  const handleTouchEnd = event => {\n    event.preventDefault();\n    onTouchEnd === null || onTouchEnd === void 0 ? void 0 : onTouchEnd(event);\n  };\n  const handleItemBlur = () => isOutside && setHovered(-1);\n  const handleInputChange = event => {\n    if (!readOnly) {\n      if (typeof event === \"number\") {\n        setHovered(event);\n      } else {\n        setHovered(parseFloat(event.target.value));\n      }\n    }\n  };\n  const handleChange = event => {\n    if (!readOnly) {\n      if (typeof event === \"number\") {\n        setValue(event);\n      } else {\n        setValue(parseFloat(event.target.value));\n      }\n    }\n  };\n  const items = Array(_count).fill(0).map((_, index) => {\n    const integerValue = index + 1;\n    const fractionItems = Array.from(new Array(index === 0 ? _fractions + 1 : _fractions));\n    const isGroupActive = !readOnly && Math.ceil(hovered) === integerValue;\n    return /* @__PURE__ */React.createElement(\"div\", {\n      key: integerValue,\n      \"data-active\": isGroupActive || void 0,\n      ...getStyles(\"symbolGroup\")\n    }, fractionItems.map((__, fractionIndex) => {\n      const fractionValue = decimalUnit * (index === 0 ? fractionIndex : fractionIndex + 1);\n      const symbolValue = roundValueTo(integerValue - 1 + fractionValue, decimalUnit);\n      return /* @__PURE__ */React.createElement(RatingItem, {\n        key: \"\".concat(integerValue, \"-\").concat(symbolValue),\n        getSymbolLabel,\n        emptyIcon: emptySymbol,\n        fullIcon: fullSymbol,\n        full: highlightSelectedOnly ? symbolValue === finalValue : symbolValue <= finalValue,\n        active: symbolValue === finalValue,\n        checked: symbolValue === stableValueRounded,\n        readOnly,\n        fractionValue,\n        value: symbolValue,\n        name: _name,\n        onChange: handleChange,\n        onBlur: handleItemBlur,\n        onInputChange: handleInputChange,\n        id: \"\".concat(_id, \"-\").concat(index, \"-\").concat(fractionIndex)\n      });\n    }));\n  });\n  return /* @__PURE__ */React.createElement(RatingProvider, {\n    value: {\n      getStyles\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ref: useMergedRef(rootRef, ref),\n    ...getStyles(\"root\"),\n    onMouseMove: handleMouseMove,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd,\n    variant,\n    size,\n    id: _id,\n    ...others\n  }, items));\n});\nRating.classes = classes;\nRating.displayName = \"@mantine/core/Rating\";\nexport { Rating };","map":null,"metadata":{},"sourceType":"module"}