{"ast":null,"code":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useUncontrolled, useEyeDropper, useDidUpdate } from '@mantine/hooks';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ActionIcon } from '../ActionIcon/ActionIcon.mjs';\nimport '../ActionIcon/ActionIconGroup/ActionIconGroup.mjs';\nimport { ColorPicker } from '../ColorPicker/ColorPicker.mjs';\nimport '../ColorPicker/AlphaSlider/AlphaSlider.mjs';\nimport '../ColorPicker/HueSlider/HueSlider.mjs';\nimport { convertHsvaTo } from '../ColorPicker/converters/converters.mjs';\nimport { parseColor, isColorValid } from '../ColorPicker/converters/parsers.mjs';\nimport { ColorSwatch } from '../ColorSwatch/ColorSwatch.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport '../Input/InputWrapper/InputWrapper.mjs';\nimport '../Input/InputDescription/InputDescription.mjs';\nimport '../Input/InputError/InputError.mjs';\nimport '../Input/InputLabel/InputLabel.mjs';\nimport '../Input/InputPlaceholder/InputPlaceholder.mjs';\nimport { useInputProps } from '../Input/use-input-props.mjs';\nimport '../Input/InputWrapper.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Popover } from '../Popover/Popover.mjs';\nimport '../Popover/PopoverDropdown/PopoverDropdown.mjs';\nimport '../Popover/PopoverTarget/PopoverTarget.mjs';\nimport { EyeDropperIcon } from './EyeDropperIcon.mjs';\nimport classes from './ColorInput.module.css.mjs';\nconst defaultProps = {\n  format: \"hex\",\n  fixOnBlur: true,\n  withPreview: true,\n  swatchesPerRow: 7,\n  withPicker: true,\n  popoverProps: {\n    transitionProps: {\n      transition: \"fade\",\n      duration: 0\n    }\n  },\n  withEyeDropper: true\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    size\n  } = _ref;\n  return {\n    eyeDropperIcon: {\n      \"--ci-eye-dropper-icon-size\": getSize(size, \"ci-eye-dropper-icon-size\")\n    },\n    colorPreview: {\n      \"--ci-preview-size\": getSize(size, \"ci-preview-size\")\n    }\n  };\n});\nconst ColorInput = factory((_props, ref) => {\n  const props = useProps(\"ColorInput\", defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    disallowInput,\n    fixOnBlur,\n    popoverProps,\n    withPreview,\n    withEyeDropper,\n    eyeDropperIcon,\n    closeOnColorSwatchClick,\n    eyeDropperButtonProps,\n    value,\n    defaultValue,\n    onChange,\n    onChangeEnd,\n    onClick,\n    onFocus,\n    onBlur,\n    inputProps,\n    format,\n    wrapperProps,\n    readOnly,\n    withPicker,\n    swatches,\n    disabled,\n    leftSection,\n    rightSection,\n    swatchesPerRow,\n    ...others\n  } = useInputProps(\"ColorInput\", defaultProps, _props);\n  const getStyles = useStyles({\n    name: \"ColorInput\",\n    props,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"wrapper\",\n    vars: props.vars,\n    varsResolver\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const [dropdownOpened, setDropdownOpened] = useState(false);\n  const [lastValidValue, setLastValidValue] = useState(\"\");\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: \"\",\n    onChange\n  });\n  const {\n    supported: eyeDropperSupported,\n    open: openEyeDropper\n  } = useEyeDropper();\n  const eyeDropper = /* @__PURE__ */React.createElement(ActionIcon, {\n    ...eyeDropperButtonProps,\n    ...getStyles(\"eyeDropperButton\", {\n      className: eyeDropperButtonProps === null || eyeDropperButtonProps === void 0 ? void 0 : eyeDropperButtonProps.className,\n      style: eyeDropperButtonProps === null || eyeDropperButtonProps === void 0 ? void 0 : eyeDropperButtonProps.style\n    }),\n    variant: \"subtle\",\n    color: \"gray\",\n    size: inputProps.size,\n    unstyled,\n    onClick: () => openEyeDropper().then(payload => {\n      if (payload === null || payload === void 0 ? void 0 : payload.sRGBHex) {\n        const color = convertHsvaTo(format, parseColor(payload.sRGBHex));\n        setValue(color);\n        onChangeEnd === null || onChangeEnd === void 0 ? void 0 : onChangeEnd(color);\n      }\n    }).catch(() => {})\n  }, eyeDropperIcon || /* @__PURE__ */React.createElement(EyeDropperIcon, {\n    ...getStyles(\"eyeDropperIcon\")\n  }));\n  const handleInputFocus = event => {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n    setDropdownOpened(true);\n  };\n  const handleInputBlur = event => {\n    fixOnBlur && setValue(lastValidValue);\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n    setDropdownOpened(false);\n  };\n  const handleInputClick = event => {\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    setDropdownOpened(true);\n  };\n  useEffect(() => {\n    if (isColorValid(_value) || _value.trim() === \"\") {\n      setLastValidValue(_value);\n    }\n  }, [_value]);\n  useDidUpdate(() => {\n    if (isColorValid(_value)) {\n      setValue(convertHsvaTo(format, parseColor(_value)));\n    }\n  }, [format]);\n  return /* @__PURE__ */React.createElement(Input.Wrapper, {\n    ...wrapperProps,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    __staticSelector: \"ColorInput\"\n  }, /* @__PURE__ */React.createElement(Popover, {\n    __staticSelector: \"ColorInput\",\n    position: \"bottom-start\",\n    offset: 5,\n    ...popoverProps,\n    opened: dropdownOpened,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    withRoles: false,\n    disabled: readOnly || withPicker === false && (!Array.isArray(swatches) || swatches.length === 0)\n  }, /* @__PURE__ */React.createElement(Popover.Target, null, /* @__PURE__ */React.createElement(Input, {\n    autoComplete: \"off\",\n    ...others,\n    ...inputProps,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    disabled,\n    ref,\n    __staticSelector: \"ColorInput\",\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onClick: handleInputClick,\n    spellCheck: false,\n    value: _value,\n    onChange: event => {\n      const inputValue = event.currentTarget.value;\n      setValue(inputValue);\n      if (isColorValid(inputValue)) {\n        onChangeEnd === null || onChangeEnd === void 0 ? void 0 : onChangeEnd(convertHsvaTo(format, parseColor(inputValue)));\n      }\n    },\n    leftSection: leftSection || (withPreview ? /* @__PURE__ */React.createElement(ColorSwatch, {\n      color: isColorValid(_value) ? _value : \"#fff\",\n      size: \"var(--ci-preview-size)\",\n      ...getStyles(\"colorPreview\")\n    }) : null),\n    readOnly: disallowInput || readOnly,\n    pointer: disallowInput,\n    unstyled,\n    rightSection: rightSection || (withEyeDropper && !disabled && !readOnly && eyeDropperSupported ? eyeDropper : null)\n  })), /* @__PURE__ */React.createElement(Popover.Dropdown, {\n    onMouseDown: event => event.preventDefault(),\n    className: classes.dropdown\n  }, /* @__PURE__ */React.createElement(ColorPicker, {\n    __staticSelector: \"ColorInput\",\n    value: _value,\n    onChange: setValue,\n    onChangeEnd,\n    format,\n    swatches,\n    swatchesPerRow,\n    withPicker,\n    size: inputProps.size,\n    focusable: false,\n    unstyled,\n    styles: resolvedStyles,\n    classNames: resolvedClassNames,\n    onColorSwatchClick: () => closeOnColorSwatchClick && setDropdownOpened(false)\n  }))));\n});\nColorInput.classes = InputBase.classes;\nColorInput.displayName = \"@mantine/core/ColorInput\";\nexport { ColorInput };","map":null,"metadata":{},"sourceType":"module"}