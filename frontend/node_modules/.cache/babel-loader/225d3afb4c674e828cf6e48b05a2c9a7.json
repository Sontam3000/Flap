{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { filterFalsyChildren } from './filter-falsy-children/filter-falsy-children.mjs';\nimport classes from './Group.module.css.mjs';\nconst defaultProps = {\n  preventGrowOverflow: true,\n  gap: \"md\",\n  align: \"center\",\n  justify: \"flex-start\",\n  wrap: \"wrap\"\n};\nconst varsResolver = createVarsResolver((_, _ref, _ref2) => {\n  let {\n    grow,\n    preventGrowOverflow,\n    gap,\n    align,\n    justify,\n    wrap\n  } = _ref;\n  let {\n    childWidth\n  } = _ref2;\n  return {\n    root: {\n      \"--group-child-width\": grow && preventGrowOverflow ? childWidth : void 0,\n      \"--group-gap\": getSpacing(gap),\n      \"--group-align\": align,\n      \"--group-justify\": justify,\n      \"--group-wrap\": wrap\n    }\n  };\n});\nconst Group = factory((_props, ref) => {\n  const props = useProps(\"Group\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    children,\n    gap,\n    align,\n    justify,\n    wrap,\n    grow,\n    preventGrowOverflow,\n    vars,\n    variant,\n    __size,\n    mod,\n    ...others\n  } = props;\n  const filteredChildren = filterFalsyChildren(children);\n  const childrenCount = filteredChildren.length;\n  const resolvedGap = getSpacing(gap !== null && gap !== void 0 ? gap : \"md\");\n  const childWidth = \"calc(\".concat(100 / childrenCount, \"% - (\").concat(resolvedGap, \" - \").concat(resolvedGap, \" / \").concat(childrenCount, \"))\");\n  const stylesCtx = {\n    childWidth\n  };\n  const getStyles = useStyles({\n    name: \"Group\",\n    props,\n    stylesCtx,\n    className,\n    style,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\"),\n    ref,\n    variant,\n    mod: [{\n      grow\n    }, mod],\n    size: __size,\n    ...others\n  }, filteredChildren);\n});\nGroup.classes = classes;\nGroup.displayName = \"@mantine/core/Group\";\nexport { Group };","map":null,"metadata":{},"sourceType":"module"}