{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useFocusReturn, useMergedRef } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { closeOnEscape } from '../../../core/utils/close-on-escape/close-on-escape.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport '@floating-ui/react';\nimport { FloatingArrow } from '../../Floating/FloatingArrow/FloatingArrow.mjs';\nimport { FocusTrap } from '../../FocusTrap/FocusTrap.mjs';\nimport '../../Portal/Portal.mjs';\nimport { OptionalPortal } from '../../Portal/OptionalPortal.mjs';\nimport '../../Transition/transitions.mjs';\nimport { Transition } from '../../Transition/Transition.mjs';\nimport { usePopoverContext } from '../Popover.context.mjs';\nimport classes from '../Popover.module.css.mjs';\nconst defaultProps = {};\nconst PopoverDropdown = factory((_props, ref) => {\n  var _ctx$transitionProps, _ctx$transitionProps$, _ctx$transitionProps2, _ctx$transitionProps3, _ctx$transitionProps4;\n  const props = useProps(\"PopoverDropdown\", defaultProps, _props);\n  const {\n    className,\n    style,\n    vars,\n    children,\n    onKeyDownCapture,\n    variant,\n    classNames,\n    styles,\n    ...others\n  } = props;\n  const ctx = usePopoverContext();\n  const returnFocus = useFocusReturn({\n    opened: ctx.opened,\n    shouldReturnFocus: ctx.returnFocus\n  });\n  const accessibleProps = ctx.withRoles ? {\n    \"aria-labelledby\": ctx.getTargetId(),\n    id: ctx.getDropdownId(),\n    role: \"dialog\",\n    tabIndex: -1\n  } : {};\n  const mergedRef = useMergedRef(ref, ctx.floating);\n  if (ctx.disabled) {\n    return null;\n  }\n  return /* @__PURE__ */React.createElement(OptionalPortal, {\n    ...ctx.portalProps,\n    withinPortal: ctx.withinPortal\n  }, /* @__PURE__ */React.createElement(Transition, {\n    mounted: ctx.opened,\n    ...ctx.transitionProps,\n    transition: ((_ctx$transitionProps = ctx.transitionProps) === null || _ctx$transitionProps === void 0 ? void 0 : _ctx$transitionProps.transition) || \"fade\",\n    duration: (_ctx$transitionProps$ = (_ctx$transitionProps2 = ctx.transitionProps) === null || _ctx$transitionProps2 === void 0 ? void 0 : _ctx$transitionProps2.duration) !== null && _ctx$transitionProps$ !== void 0 ? _ctx$transitionProps$ : 150,\n    keepMounted: ctx.keepMounted,\n    exitDuration: typeof ((_ctx$transitionProps3 = ctx.transitionProps) === null || _ctx$transitionProps3 === void 0 ? void 0 : _ctx$transitionProps3.exitDuration) === \"number\" ? ctx.transitionProps.exitDuration : (_ctx$transitionProps4 = ctx.transitionProps) === null || _ctx$transitionProps4 === void 0 ? void 0 : _ctx$transitionProps4.duration\n  }, transitionStyles => {\n    var _ctx$y, _ctx$x;\n    return /* @__PURE__ */React.createElement(FocusTrap, {\n      active: ctx.trapFocus\n    }, /* @__PURE__ */React.createElement(Box, {\n      ...accessibleProps,\n      ...others,\n      variant,\n      ref: mergedRef,\n      onKeyDownCapture: closeOnEscape(ctx.onClose, {\n        active: ctx.closeOnEscape,\n        onTrigger: returnFocus,\n        onKeyDown: onKeyDownCapture\n      }),\n      \"data-position\": ctx.placement,\n      ...ctx.getStyles(\"dropdown\", {\n        className,\n        props,\n        classNames,\n        styles,\n        style: [{\n          ...transitionStyles,\n          zIndex: ctx.zIndex,\n          top: (_ctx$y = ctx.y) !== null && _ctx$y !== void 0 ? _ctx$y : 0,\n          left: (_ctx$x = ctx.x) !== null && _ctx$x !== void 0 ? _ctx$x : 0,\n          width: ctx.width === \"target\" ? void 0 : rem(ctx.width)\n        }, style]\n      })\n    }, children, /* @__PURE__ */React.createElement(FloatingArrow, {\n      ref: ctx.arrowRef,\n      arrowX: ctx.arrowX,\n      arrowY: ctx.arrowY,\n      visible: ctx.withArrow,\n      position: ctx.placement,\n      arrowSize: ctx.arrowSize,\n      arrowRadius: ctx.arrowRadius,\n      arrowOffset: ctx.arrowOffset,\n      arrowPosition: ctx.arrowPosition,\n      ...ctx.getStyles(\"arrow\", {\n        props,\n        classNames,\n        styles\n      })\n    })));\n  }));\n});\nPopoverDropdown.classes = classes;\nPopoverDropdown.displayName = \"@mantine/core/PopoverDropdown\";\nexport { PopoverDropdown };","map":null,"metadata":{},"sourceType":"module"}