{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { ScrollAreaScrollbarAuto } from './ScrollAreaScrollbarAuto.mjs';\nconst ScrollAreaScrollbarHover = forwardRef((props, ref) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const [visible, setVisible] = useState(false);\n  useEffect(() => {\n    const {\n      scrollArea\n    } = context;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener(\"pointerenter\", handlePointerEnter);\n      scrollArea.addEventListener(\"pointerleave\", handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener(\"pointerenter\", handlePointerEnter);\n        scrollArea.removeEventListener(\"pointerleave\", handlePointerLeave);\n      };\n    }\n    return void 0;\n  }, [context.scrollArea, context.scrollHideDelay]);\n  if (forceMount || visible) {\n    return /* @__PURE__ */React.createElement(ScrollAreaScrollbarAuto, {\n      \"data-state\": visible ? \"visible\" : \"hidden\",\n      ...scrollbarProps,\n      ref\n    });\n  }\n  return null;\n});\nexport { ScrollAreaScrollbarHover };","map":null,"metadata":{},"sourceType":"module"}