{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { createScopedKeydownHandler } from '../../../core/utils/create-scoped-keydown-handler/create-scoped-keydown-handler.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { UnstyledButton } from '../../UnstyledButton/UnstyledButton.mjs';\nimport { useAccordionContext } from '../Accordion.context.mjs';\nimport { useAccordionItemContext } from '../AccordionItem.context.mjs';\nimport classes from '../Accordion.module.css.mjs';\nconst defaultProps = {};\nconst AccordionControl = factory((props, ref) => {\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    chevron,\n    icon,\n    onClick,\n    onKeyDown,\n    children,\n    disabled,\n    mod,\n    ...others\n  } = useProps(\"AccordionControl\", defaultProps, props);\n  const {\n    value\n  } = useAccordionItemContext();\n  const ctx = useAccordionContext();\n  const isActive = ctx.isItemActive(value);\n  const shouldWrapWithHeading = typeof ctx.order === \"number\";\n  const Heading = \"h\".concat(ctx.order);\n  const content = /* @__PURE__ */React.createElement(UnstyledButton, {\n    ...others,\n    ...ctx.getStyles(\"control\", {\n      className,\n      classNames,\n      style,\n      styles,\n      variant: ctx.variant\n    }),\n    unstyled: ctx.unstyled,\n    mod: [\"accordion-control\", {\n      active: isActive,\n      \"chevron-position\": ctx.chevronPosition,\n      disabled\n    }, mod],\n    ref,\n    onClick: event => {\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n      ctx.onChange(value);\n    },\n    type: \"button\",\n    disabled,\n    \"aria-expanded\": isActive,\n    \"aria-controls\": ctx.getRegionId(value),\n    id: ctx.getControlId(value),\n    onKeyDown: createScopedKeydownHandler({\n      siblingSelector: \"[data-accordion-control]\",\n      parentSelector: \"[data-accordion]\",\n      activateOnFocus: false,\n      loop: ctx.loop,\n      orientation: \"vertical\",\n      onKeyDown\n    })\n  }, /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    mod: {\n      rotate: !ctx.disableChevronRotation && isActive,\n      position: ctx.chevronPosition\n    },\n    ...ctx.getStyles(\"chevron\", {\n      classNames,\n      styles\n    })\n  }, chevron || ctx.chevron), /* @__PURE__ */React.createElement(\"span\", {\n    ...ctx.getStyles(\"label\", {\n      classNames,\n      styles\n    })\n  }, children), icon && /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    mod: {\n      \"chevron-position\": ctx.chevronPosition\n    },\n    ...ctx.getStyles(\"icon\", {\n      classNames,\n      styles\n    })\n  }, icon));\n  return shouldWrapWithHeading ? /* @__PURE__ */React.createElement(Heading, {\n    ...ctx.getStyles(\"itemTitle\", {\n      classNames,\n      styles\n    })\n  }, content) : content;\n});\nAccordionControl.displayName = \"@mantine/core/AccordionControl\";\nAccordionControl.classes = classes;\nexport { AccordionControl };","map":null,"metadata":{},"sourceType":"module"}