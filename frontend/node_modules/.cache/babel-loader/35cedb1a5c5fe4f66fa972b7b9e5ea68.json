{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { isScrollingWithinScrollbarBounds } from '../utils/is-scrolling-within-scrollbar-bounds.mjs';\nimport { getThumbSize } from '../utils/get-thumb-size.mjs';\nimport { toInt } from '../utils/to-int.mjs';\nimport { Scrollbar } from './Scrollbar.mjs';\nconst ScrollAreaScrollbarX = forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    onSizesChange,\n    style,\n    ...others\n  } = props;\n  const ctx = useScrollAreaContext();\n  const [computedStyle, setComputedStyle] = useState();\n  const ref = useRef(null);\n  const composeRefs = useMergedRef(forwardedRef, ref, ctx.onScrollbarXChange);\n  useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */React.createElement(Scrollbar, {\n    \"data-orientation\": \"horizontal\",\n    ...others,\n    ref: composeRefs,\n    sizes,\n    style: {\n      ...style,\n      [\"--sa-thumb-width\"]: \"\".concat(getThumbSize(sizes), \"px\")\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.x),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.x),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (ctx.viewport) {\n        const scrollPos = ctx.viewport.scrollLeft + event.deltaX;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && ctx.viewport && computedStyle) {\n        onSizesChange({\n          content: ctx.viewport.scrollWidth,\n          viewport: ctx.viewport.offsetWidth,\n          scrollbar: {\n            size: ref.current.clientWidth,\n            paddingStart: toInt(computedStyle.paddingLeft),\n            paddingEnd: toInt(computedStyle.paddingRight)\n          }\n        });\n      }\n    }\n  });\n});\nexport { ScrollAreaScrollbarX };","map":null,"metadata":{},"sourceType":"module"}