{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getPositionVariables } from './get-position-variables/get-position-variables.mjs';\nimport classes from './Indicator.module.css.mjs';\nconst defaultProps = {\n  position: \"top-end\",\n  offset: 0,\n  inline: false,\n  withBorder: false,\n  disabled: false,\n  processing: false\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    color,\n    position,\n    offset,\n    size,\n    radius,\n    zIndex,\n    autoContrast\n  } = _ref;\n  return {\n    root: {\n      \"--indicator-color\": color ? getThemeColor(color, theme) : void 0,\n      \"--indicator-text-color\": getAutoContrastValue(autoContrast, theme) ? getContrastColor({\n        color,\n        theme\n      }) : void 0,\n      \"--indicator-size\": rem(size),\n      \"--indicator-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--indicator-z-index\": zIndex === null || zIndex === void 0 ? void 0 : zIndex.toString(),\n      ...getPositionVariables(position, offset)\n    }\n  };\n});\nconst Indicator = factory((_props, ref) => {\n  const props = useProps(\"Indicator\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    position,\n    offset,\n    inline,\n    label,\n    radius,\n    color,\n    withBorder,\n    disabled,\n    processing,\n    zIndex,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Indicator\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(Box, {\n    ref,\n    ...getStyles(\"root\"),\n    mod: [{\n      inline\n    }, mod],\n    ...others\n  }, !disabled && /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(Box, {\n    mod: {\n      \"with-label\": !!label,\n      \"with-border\": withBorder,\n      processing\n    },\n    ...getStyles(\"indicator\")\n  }, label)), children);\n});\nIndicator.classes = classes;\nIndicator.displayName = \"@mantine/core/Indicator\";\nexport { Indicator };","map":null,"metadata":{},"sourceType":"module"}