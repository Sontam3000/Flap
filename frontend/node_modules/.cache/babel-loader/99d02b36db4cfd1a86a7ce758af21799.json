{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { useResizeObserver } from '../use-resize-observer.mjs';\nconst Corner = React.forwardRef((props, ref) => {\n  const {\n    style,\n    ...others\n  } = props;\n  const ctx = useScrollAreaContext();\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n  useResizeObserver(ctx.scrollbarX, () => {\n    var _ctx$scrollbarX;\n    const h = ((_ctx$scrollbarX = ctx.scrollbarX) === null || _ctx$scrollbarX === void 0 ? void 0 : _ctx$scrollbarX.offsetHeight) || 0;\n    ctx.onCornerHeightChange(h);\n    setHeight(h);\n  });\n  useResizeObserver(ctx.scrollbarY, () => {\n    var _ctx$scrollbarY;\n    const w = ((_ctx$scrollbarY = ctx.scrollbarY) === null || _ctx$scrollbarY === void 0 ? void 0 : _ctx$scrollbarY.offsetWidth) || 0;\n    ctx.onCornerWidthChange(w);\n    setWidth(w);\n  });\n  return hasSize ? /* @__PURE__ */React.createElement(\"div\", {\n    ...others,\n    ref,\n    style: {\n      ...style,\n      width,\n      height\n    }\n  }) : null;\n});\nconst ScrollAreaCorner = React.forwardRef((props, ref) => {\n  const ctx = useScrollAreaContext();\n  const hasBothScrollbarsVisible = Boolean(ctx.scrollbarX && ctx.scrollbarY);\n  const hasCorner = ctx.type !== \"scroll\" && hasBothScrollbarsVisible;\n  return hasCorner ? /* @__PURE__ */React.createElement(Corner, {\n    ...props,\n    ref\n  }) : null;\n});\nexport { Corner, ScrollAreaCorner };","map":null,"metadata":{},"sourceType":"module"}