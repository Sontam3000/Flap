{"ast":null,"code":"'use client';\n\nimport React, { useRef, useState, useCallback } from 'react';\nimport { useId, useClickOutside } from '@mantine/hooks';\nimport { getDefaultZIndex } from '../../core/utils/get-default-z-index/get-default-z-index.mjs';\nimport { getRadius, getShadow } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/Box/Box.mjs';\nimport { useDirection } from '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '@floating-ui/react';\nimport { getFloatingPosition } from '../Floating/get-floating-position/get-floating-position.mjs';\nimport '../Floating/FloatingArrow/FloatingArrow.mjs';\nimport { PopoverContextProvider } from './Popover.context.mjs';\nimport { PopoverDropdown } from './PopoverDropdown/PopoverDropdown.mjs';\nimport { PopoverTarget } from './PopoverTarget/PopoverTarget.mjs';\nimport { usePopover } from './use-popover.mjs';\nimport classes from './Popover.module.css.mjs';\nconst defaultProps = {\n  position: \"bottom\",\n  offset: 8,\n  positionDependencies: [],\n  transitionProps: {\n    transition: \"fade\",\n    duration: 150\n  },\n  middlewares: {\n    flip: true,\n    shift: true,\n    inline: false\n  },\n  arrowSize: 7,\n  arrowOffset: 5,\n  arrowRadius: 0,\n  arrowPosition: \"side\",\n  closeOnClickOutside: true,\n  withinPortal: true,\n  closeOnEscape: true,\n  trapFocus: false,\n  withRoles: true,\n  returnFocus: false,\n  clickOutsideEvents: [\"mousedown\", \"touchstart\"],\n  zIndex: getDefaultZIndex(\"popover\"),\n  __staticSelector: \"Popover\",\n  width: \"max-content\"\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    radius,\n    shadow\n  } = _ref;\n  return {\n    dropdown: {\n      \"--popover-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--popover-shadow\": getShadow(shadow)\n    }\n  };\n});\nfunction Popover(_props) {\n  var _popover$floating, _popover$floating$mid, _popover$floating$mid2, _popover$floating2, _popover$floating2$mi, _popover$floating2$mi2;\n  const props = useProps(\"Popover\", defaultProps, _props);\n  const {\n    children,\n    position,\n    offset,\n    onPositionChange,\n    positionDependencies,\n    opened,\n    transitionProps,\n    width,\n    middlewares,\n    withArrow,\n    arrowSize,\n    arrowOffset,\n    arrowRadius,\n    arrowPosition,\n    unstyled,\n    classNames,\n    styles,\n    closeOnClickOutside,\n    withinPortal,\n    portalProps,\n    closeOnEscape,\n    clickOutsideEvents,\n    trapFocus,\n    onClose,\n    onOpen,\n    onChange,\n    zIndex,\n    radius,\n    shadow,\n    id,\n    defaultOpened,\n    __staticSelector,\n    withRoles,\n    disabled,\n    returnFocus,\n    variant,\n    keepMounted,\n    vars,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: __staticSelector,\n    props,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"dropdown\",\n    vars,\n    varsResolver\n  });\n  const arrowRef = useRef(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [dropdownNode, setDropdownNode] = useState(null);\n  const {\n    dir\n  } = useDirection();\n  const uid = useId(id);\n  const popover = usePopover({\n    middlewares,\n    width,\n    position: getFloatingPosition(dir, position),\n    offset: typeof offset === \"number\" ? offset + (withArrow ? arrowSize / 2 : 0) : offset,\n    arrowRef,\n    arrowOffset,\n    onPositionChange,\n    positionDependencies,\n    opened,\n    defaultOpened,\n    onChange,\n    onOpen,\n    onClose\n  });\n  useClickOutside(() => closeOnClickOutside && popover.onClose(), clickOutsideEvents, [targetNode, dropdownNode]);\n  const reference = useCallback(node => {\n    setTargetNode(node);\n    popover.floating.refs.setReference(node);\n  }, [popover.floating.refs.setReference]);\n  const floating = useCallback(node => {\n    setDropdownNode(node);\n    popover.floating.refs.setFloating(node);\n  }, [popover.floating.refs.setFloating]);\n  return /* @__PURE__ */React.createElement(PopoverContextProvider, {\n    value: {\n      returnFocus,\n      disabled,\n      controlled: popover.controlled,\n      reference,\n      floating,\n      x: popover.floating.x,\n      y: popover.floating.y,\n      arrowX: (_popover$floating = popover.floating) === null || _popover$floating === void 0 ? void 0 : (_popover$floating$mid = _popover$floating.middlewareData) === null || _popover$floating$mid === void 0 ? void 0 : (_popover$floating$mid2 = _popover$floating$mid.arrow) === null || _popover$floating$mid2 === void 0 ? void 0 : _popover$floating$mid2.x,\n      arrowY: (_popover$floating2 = popover.floating) === null || _popover$floating2 === void 0 ? void 0 : (_popover$floating2$mi = _popover$floating2.middlewareData) === null || _popover$floating2$mi === void 0 ? void 0 : (_popover$floating2$mi2 = _popover$floating2$mi.arrow) === null || _popover$floating2$mi2 === void 0 ? void 0 : _popover$floating2$mi2.y,\n      opened: popover.opened,\n      arrowRef,\n      transitionProps,\n      width,\n      withArrow,\n      arrowSize,\n      arrowOffset,\n      arrowRadius,\n      arrowPosition,\n      placement: popover.floating.placement,\n      trapFocus,\n      withinPortal,\n      portalProps,\n      zIndex,\n      radius,\n      shadow,\n      closeOnEscape,\n      onClose: popover.onClose,\n      onToggle: popover.onToggle,\n      getTargetId: () => \"\".concat(uid, \"-target\"),\n      getDropdownId: () => \"\".concat(uid, \"-dropdown\"),\n      withRoles,\n      targetProps: others,\n      __staticSelector,\n      classNames,\n      styles,\n      unstyled,\n      variant,\n      keepMounted,\n      getStyles\n    }\n  }, children);\n}\nPopover.Target = PopoverTarget;\nPopover.Dropdown = PopoverDropdown;\nPopover.displayName = \"@mantine/core/Popover\";\nPopover.extend = input => input;\nexport { Popover };","map":null,"metadata":{},"sourceType":"module"}