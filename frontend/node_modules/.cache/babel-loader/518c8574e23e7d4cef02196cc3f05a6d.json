{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { getFontSize, getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../Checkbox/Checkbox.mjs';\nimport '../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../Checkbox/CheckIcon.mjs';\nimport { useChipGroupContext } from './ChipGroup.context.mjs';\nimport { ChipGroup } from './ChipGroup/ChipGroup.mjs';\nimport classes from './Chip.module.css.mjs';\nconst defaultProps = {\n  type: \"checkbox\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    radius,\n    variant,\n    color,\n    autoContrast\n  } = _ref;\n  const colors = theme.variantColorResolver({\n    color: color || theme.primaryColor,\n    theme,\n    variant: variant || \"filled\",\n    autoContrast\n  });\n  return {\n    root: {\n      \"--chip-fz\": getFontSize(size),\n      \"--chip-size\": getSize(size, \"chip-size\"),\n      \"--chip-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--chip-checked-padding\": getSize(size, \"chip-checked-padding\"),\n      \"--chip-padding\": getSize(size, \"chip-padding\"),\n      \"--chip-icon-size\": getSize(size, \"chip-icon-size\"),\n      \"--chip-bg\": color || variant ? colors.background : void 0,\n      \"--chip-hover\": color || variant ? colors.hover : void 0,\n      \"--chip-color\": color || variant ? colors.color : void 0,\n      \"--chip-bd\": color || variant ? colors.border : void 0,\n      \"--chip-spacing\": getSize(size, \"chip-spacing\")\n    }\n  };\n});\nconst Chip = factory((_props, ref) => {\n  const props = useProps(\"Chip\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    checked,\n    defaultChecked,\n    onChange,\n    value,\n    wrapperProps,\n    type,\n    disabled,\n    children,\n    size,\n    variant,\n    icon,\n    rootRef,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Chip\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const ctx = useChipGroupContext();\n  const uuid = useId(id);\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange\n  });\n  const contextProps = ctx ? {\n    checked: ctx.isChipSelected(value),\n    onChange: event => {\n      ctx.onChange(event);\n      onChange === null || onChange === void 0 ? void 0 : onChange(event.currentTarget.checked);\n    },\n    type: ctx.multiple ? \"checkbox\" : \"radio\"\n  } : {};\n  const _checked = contextProps.checked || _value;\n  return /* @__PURE__ */React.createElement(Box, {\n    size,\n    variant,\n    ref: rootRef,\n    mod,\n    ...getStyles(\"root\"),\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(\"input\", {\n    type,\n    ...getStyles(\"input\"),\n    checked: _checked,\n    onChange: event => setValue(event.currentTarget.checked),\n    id: uuid,\n    disabled,\n    ref,\n    value,\n    ...contextProps,\n    ...rest\n  }), /* @__PURE__ */React.createElement(\"label\", {\n    htmlFor: uuid,\n    \"data-checked\": _checked || void 0,\n    \"data-disabled\": disabled || void 0,\n    ...getStyles(\"label\", {\n      variant: variant || \"filled\"\n    })\n  }, _checked && /* @__PURE__ */React.createElement(\"span\", {\n    ...getStyles(\"iconWrapper\")\n  }, icon || /* @__PURE__ */React.createElement(CheckIcon, {\n    ...getStyles(\"checkIcon\")\n  })), /* @__PURE__ */React.createElement(\"span\", null, children)));\n});\nChip.classes = classes;\nChip.displayName = \"@mantine/core/Chip\";\nChip.Group = ChipGroup;\nexport { Chip };","map":null,"metadata":{},"sourceType":"module"}