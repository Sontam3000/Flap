{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId } from '@mantine/hooks';\nimport { getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InlineInput } from '../InlineInput/InlineInput.mjs';\nimport { useRadioGroupContext } from './RadioGroup.context.mjs';\nimport { RadioGroup } from './RadioGroup/RadioGroup.mjs';\nimport { RadioIcon } from './RadioIcon.mjs';\nimport classes from './Radio.module.css.mjs';\nconst defaultProps = {\n  labelPosition: \"right\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    radius,\n    color,\n    iconColor,\n    variant,\n    autoContrast\n  } = _ref;\n  const parsedColor = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme\n  });\n  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? \"var(--mantine-color-\".concat(parsedColor.color, \"-outline)\") : parsedColor.color;\n  return {\n    root: {\n      \"--radio-size\": getSize(size, \"radio-size\"),\n      \"--radio-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--radio-color\": variant === \"outline\" ? outlineColor : getThemeColor(color, theme),\n      \"--radio-icon-color\": iconColor ? getThemeColor(iconColor, theme) : getAutoContrastValue(autoContrast, theme) ? getContrastColor({\n        color,\n        theme\n      }) : void 0,\n      \"--radio-icon-size\": getSize(size, \"radio-icon-size\")\n    }\n  };\n});\nconst Radio = factory((_props, ref) => {\n  var _ctx$size, _rest$name;\n  const props = useProps(\"Radio\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    size,\n    label,\n    labelPosition,\n    description,\n    error,\n    radius,\n    color,\n    variant,\n    disabled,\n    wrapperProps,\n    icon: Icon = RadioIcon,\n    rootRef,\n    iconColor,\n    onChange,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Radio\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const ctx = useRadioGroupContext();\n  const contextSize = (_ctx$size = ctx === null || ctx === void 0 ? void 0 : ctx.size) !== null && _ctx$size !== void 0 ? _ctx$size : size;\n  const componentSize = props.size ? size : contextSize;\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const uuid = useId(id);\n  const contextProps = ctx ? {\n    checked: ctx.value === rest.value,\n    name: (_rest$name = rest.name) !== null && _rest$name !== void 0 ? _rest$name : ctx.name,\n    onChange: event => {\n      ctx.onChange(event);\n      onChange === null || onChange === void 0 ? void 0 : onChange(event);\n    }\n  } : {};\n  return /* @__PURE__ */React.createElement(InlineInput, {\n    ...getStyles(\"root\"),\n    __staticSelector: \"Radio\",\n    __stylesApiProps: props,\n    id: uuid,\n    size: componentSize,\n    labelPosition,\n    label,\n    description,\n    error,\n    disabled,\n    classNames,\n    styles,\n    unstyled,\n    \"data-checked\": contextProps.checked || void 0,\n    variant,\n    ref: rootRef,\n    mod,\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"inner\"),\n    mod: {\n      \"label-position\": labelPosition\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"radio\", {\n      focusable: true,\n      variant\n    }),\n    onChange,\n    ...rest,\n    ...contextProps,\n    component: \"input\",\n    mod: {\n      error: !!error\n    },\n    ref,\n    id: uuid,\n    disabled,\n    type: \"radio\"\n  }), /* @__PURE__ */React.createElement(Icon, {\n    ...getStyles(\"icon\"),\n    \"aria-hidden\": true\n  })));\n});\nRadio.classes = classes;\nRadio.displayName = \"@mantine/core/Radio\";\nRadio.Group = RadioGroup;\nexport { Radio };","map":null,"metadata":{},"sourceType":"module"}