{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport { getSafeId } from '../../core/utils/get-safe-id/get-safe-id.mjs';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { AccordionProvider } from './Accordion.context.mjs';\nimport { AccordionChevron } from './AccordionChevron.mjs';\nimport { AccordionControl } from './AccordionControl/AccordionControl.mjs';\nimport { AccordionItem } from './AccordionItem/AccordionItem.mjs';\nimport { AccordionPanel } from './AccordionPanel/AccordionPanel.mjs';\nimport classes from './Accordion.module.css.mjs';\nconst defaultProps = {\n  multiple: false,\n  disableChevronRotation: false,\n  chevronPosition: \"right\",\n  variant: \"default\",\n  chevron: /* @__PURE__ */React.createElement(AccordionChevron, null)\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    transitionDuration,\n    chevronSize,\n    radius\n  } = _ref;\n  return {\n    root: {\n      \"--accordion-transition-duration\": transitionDuration === void 0 ? void 0 : \"\".concat(transitionDuration, \"ms\"),\n      \"--accordion-chevron-size\": chevronSize === void 0 ? void 0 : rem(chevronSize),\n      \"--accordion-radius\": radius === void 0 ? void 0 : getRadius(radius)\n    }\n  };\n});\nfunction Accordion(_props) {\n  const props = useProps(\"Accordion\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    ...others\n  } = props;\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n  const getStyles = useStyles({\n    name: \"Accordion\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(AccordionProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(\"\".concat(uid, \"-control\"), \"Accordion.Item component was rendered with invalid value or without value\"),\n      getRegionId: getSafeId(\"\".concat(uid, \"-panel\"), \"Accordion.Item component was rendered with invalid value or without value\"),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      order,\n      chevron,\n      loop,\n      getStyles,\n      variant,\n      unstyled\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\"),\n    id: uid,\n    ...others,\n    variant,\n    \"data-accordion\": true\n  }, children));\n}\nconst extendAccordion = c => c;\nAccordion.extend = extendAccordion;\nAccordion.classes = classes;\nAccordion.displayName = \"@mantine/core/Accordion\";\nAccordion.Item = AccordionItem;\nAccordion.Panel = AccordionPanel;\nAccordion.Control = AccordionControl;\nAccordion.Chevron = AccordionChevron;\nexport { Accordion };","map":null,"metadata":{},"sourceType":"module"}