{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useState } from 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../../Transition/transitions.mjs';\nimport { Transition } from '../../Transition/Transition.mjs';\nimport { useSliderContext } from '../Slider.context.mjs';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    onKeyDownCapture,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    isHovered,\n    children = null,\n    disabled\n  } = _ref;\n  const {\n    getStyles\n  } = useSliderContext();\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover && isHovered;\n  return /* @__PURE__ */React.createElement(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    __vars: {\n      \"--slider-thumb-offset\": \"\".concat(position, \"%\")\n    },\n    ...getStyles(\"thumb\", {\n      focusable: true\n    }),\n    mod: {\n      dragging,\n      disabled\n    },\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onKeyDownCapture,\n    onClick: event => event.stopPropagation()\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && !!isVisible,\n    transition: \"fade\",\n    duration: 0,\n    ...labelTransitionProps\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"label\", {\n      style: transitionStyles\n    })\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":null,"metadata":{},"sourceType":"module"}