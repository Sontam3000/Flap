{"ast":null,"code":"function scaleRem(remValue) {\n  return \"calc(\".concat(remValue, \" * var(--mantine-scale))\");\n}\nfunction createConverter(units) {\n  let {\n    shouldScale = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  function converter(value) {\n    if (value === 0 || value === \"0\") {\n      return \"0\".concat(units);\n    }\n    if (typeof value === \"number\") {\n      const val = \"\".concat(value / 16).concat(units);\n      return shouldScale ? scaleRem(val) : val;\n    }\n    if (typeof value === \"string\") {\n      if (value.startsWith(\"calc(\") || value.startsWith(\"var(\") || value.startsWith(\"clamp(\")) {\n        return value;\n      }\n      if (value.includes(\" \")) {\n        return value.split(\" \").map(val => converter(val)).join(\" \");\n      }\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n      const replaced = value.replace(\"px\", \"\");\n      if (!Number.isNaN(Number(replaced))) {\n        const val = \"\".concat(Number(replaced) / 16).concat(units);\n        return shouldScale ? scaleRem(val) : val;\n      }\n    }\n    return value;\n  }\n  return converter;\n}\nconst rem = createConverter(\"rem\", {\n  shouldScale: true\n});\nconst em = createConverter(\"em\");\nexport { em, rem };","map":null,"metadata":{},"sourceType":"module"}