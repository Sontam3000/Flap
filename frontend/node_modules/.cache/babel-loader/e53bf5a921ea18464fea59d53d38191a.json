{"ast":null,"code":"'use client';\n\nimport React, { useRef, cloneElement } from 'react';\nimport cx from 'clsx';\nimport { useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core/utils/is-element/is-element.mjs';\nimport { getDefaultZIndex } from '../../core/utils/get-default-z-index/get-default-z-index.mjs';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport { useDirection } from '../../core/DirectionProvider/DirectionProvider.mjs';\nimport '@floating-ui/react';\nimport { getFloatingPosition } from '../Floating/get-floating-position/get-floating-position.mjs';\nimport { FloatingArrow } from '../Floating/FloatingArrow/FloatingArrow.mjs';\nimport '../Portal/Portal.mjs';\nimport { OptionalPortal } from '../Portal/OptionalPortal.mjs';\nimport '../Transition/transitions.mjs';\nimport { Transition } from '../Transition/Transition.mjs';\nimport { getTransitionProps } from '../Transition/get-transition-props/get-transition-props.mjs';\nimport { TooltipFloating } from './TooltipFloating/TooltipFloating.mjs';\nimport { TooltipGroup } from './TooltipGroup/TooltipGroup.mjs';\nimport { useTooltip } from './use-tooltip.mjs';\nimport classes from './Tooltip.module.css.mjs';\nconst defaultProps = {\n  position: \"top\",\n  refProp: \"ref\",\n  withinPortal: true,\n  inline: false,\n  arrowSize: 4,\n  arrowOffset: 5,\n  arrowRadius: 0,\n  arrowPosition: \"side\",\n  offset: 5,\n  transitionProps: {\n    duration: 100,\n    transition: \"fade\"\n  },\n  events: {\n    hover: true,\n    focus: false,\n    touch: false\n  },\n  zIndex: getDefaultZIndex(\"popover\"),\n  positionDependencies: []\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    radius,\n    color\n  } = _ref;\n  return {\n    tooltip: {\n      \"--tooltip-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--tooltip-bg\": color ? getThemeColor(color, theme) : void 0,\n      \"--tooltip-color\": color ? \"var(--mantine-color-white)\" : void 0\n    }\n  };\n});\nconst Tooltip = factory((_props, ref) => {\n  const props = useProps(\"Tooltip\", defaultProps, _props);\n  const {\n    children,\n    position,\n    refProp,\n    label,\n    openDelay,\n    closeDelay,\n    onPositionChange,\n    opened,\n    withinPortal,\n    radius,\n    color,\n    classNames,\n    styles,\n    unstyled,\n    style,\n    className,\n    withArrow,\n    arrowSize,\n    arrowOffset,\n    arrowRadius,\n    arrowPosition,\n    offset,\n    transitionProps,\n    multiline,\n    events,\n    zIndex,\n    disabled,\n    positionDependencies,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    inline,\n    variant,\n    keepMounted,\n    vars,\n    portalProps,\n    mod,\n    ...others\n  } = useProps(\"Tooltip\", defaultProps, props);\n  const {\n    dir\n  } = useDirection();\n  const arrowRef = useRef(null);\n  const tooltip = useTooltip({\n    position: getFloatingPosition(dir, position),\n    closeDelay,\n    openDelay,\n    onPositionChange,\n    opened,\n    events,\n    arrowRef,\n    arrowOffset,\n    offset: typeof offset === \"number\" ? offset + (withArrow ? arrowSize / 2 : 0) : offset,\n    positionDependencies: [...positionDependencies, children],\n    inline\n  });\n  const getStyles = useStyles({\n    name: \"Tooltip\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"tooltip\",\n    vars,\n    varsResolver\n  });\n  if (!isElement(children)) {\n    throw new Error(\"[@mantine/core] Tooltip component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const targetRef = useMergedRef(tooltip.reference, children.ref, ref);\n  const transition = getTransitionProps(transitionProps, {\n    duration: 100,\n    transition: \"fade\"\n  });\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(OptionalPortal, {\n    ...portalProps,\n    withinPortal\n  }, /* @__PURE__ */React.createElement(Transition, {\n    ...transition,\n    keepMounted,\n    mounted: !disabled && !!tooltip.opened,\n    duration: tooltip.isGroupPhase ? 10 : transition.duration\n  }, transitionStyles => {\n    var _tooltip$y, _tooltip$x;\n    return /* @__PURE__ */React.createElement(Box, {\n      ...others,\n      variant,\n      mod: [{\n        multiline\n      }, mod],\n      ...tooltip.getFloatingProps({\n        ref: tooltip.floating,\n        className: getStyles(\"tooltip\").className,\n        style: {\n          ...getStyles(\"tooltip\").style,\n          ...transitionStyles,\n          zIndex,\n          top: (_tooltip$y = tooltip.y) !== null && _tooltip$y !== void 0 ? _tooltip$y : 0,\n          left: (_tooltip$x = tooltip.x) !== null && _tooltip$x !== void 0 ? _tooltip$x : 0\n        }\n      })\n    }, label, /* @__PURE__ */React.createElement(FloatingArrow, {\n      ref: arrowRef,\n      arrowX: tooltip.arrowX,\n      arrowY: tooltip.arrowY,\n      visible: withArrow,\n      position: tooltip.placement,\n      arrowSize,\n      arrowOffset,\n      arrowRadius,\n      arrowPosition,\n      ...getStyles(\"arrow\")\n    }));\n  })), cloneElement(children, tooltip.getReferenceProps({\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove: props.onMouseMove,\n    onPointerDown: props.onPointerDown,\n    onPointerEnter: props.onPointerEnter,\n    [refProp]: targetRef,\n    className: cx(className, children.props.className),\n    ...children.props\n  })));\n});\nTooltip.classes = classes;\nTooltip.displayName = \"@mantine/core/Tooltip\";\nTooltip.Floating = TooltipFloating;\nTooltip.Group = TooltipGroup;\nexport { Tooltip };","map":null,"metadata":{},"sourceType":"module"}