{"ast":null,"code":"'use client';\n\nimport React, { useMemo, useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nconst defaultProps = {\n  searchable: false,\n  withCheckIcon: true,\n  allowDeselect: true,\n  checkIconPosition: \"left\"\n};\nconst Select = factory((_props, ref) => {\n  const props = useProps(\"Select\", defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownClose,\n    onDropdownOpen,\n    onFocus,\n    onBlur,\n    onClick,\n    onChange,\n    data,\n    value,\n    defaultValue,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    readOnly,\n    disabled,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    size,\n    searchable,\n    rightSection,\n    checkIconPosition,\n    withCheckIcon,\n    nothingFoundMessage,\n    name,\n    form,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    allowDeselect,\n    error,\n    rightSectionPointerEvents,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    ...others\n  } = props;\n  const parsedData = useMemo(() => getParsedComboboxData(data), [data]);\n  const optionsLockup = useMemo(() => getOptionsLockup(parsedData), [parsedData]);\n  const _id = useId(id);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange\n  });\n  const selectedOption = typeof _value === \"string\" ? optionsLockup[_value] : void 0;\n  const [search, setSearch] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: selectedOption ? selectedOption.label : \"\",\n    onChange: onSearchChange\n  });\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen: () => {\n      onDropdownOpen === null || onDropdownOpen === void 0 ? void 0 : onDropdownOpen();\n      combobox.updateSelectedOptionIndex(\"active\", {\n        scrollIntoView: true\n      });\n    },\n    onDropdownClose: () => {\n      onDropdownClose === null || onDropdownClose === void 0 ? void 0 : onDropdownClose();\n      combobox.resetSelectedOption();\n    }\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value]);\n  useEffect(() => {\n    if (value === null) {\n      setSearch(\"\");\n    }\n    if (typeof value === \"string\" && selectedOption) {\n      setSearch(selectedOption.label);\n    }\n  }, [value, selectedOption]);\n  const clearButton = clearable && !!_value && !disabled && !readOnly && /* @__PURE__ */React.createElement(Combobox.ClearButton, {\n    size,\n    ...clearButtonProps,\n    onClear: () => {\n      setValue(null, null);\n      setSearch(\"\");\n    }\n  });\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(Combobox, {\n    store: combobox,\n    __staticSelector: \"Select\",\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    readOnly,\n    onOptionSubmit: val => {\n      onOptionSubmit === null || onOptionSubmit === void 0 ? void 0 : onOptionSubmit(val);\n      const optionLockup = allowDeselect ? optionsLockup[val].value === _value ? null : optionsLockup[val] : optionsLockup[val];\n      const nextValue = optionLockup ? optionLockup.value : null;\n      setValue(nextValue, optionLockup);\n      setSearch(typeof nextValue === \"string\" ? (optionLockup === null || optionLockup === void 0 ? void 0 : optionLockup.label) || \"\" : \"\");\n      combobox.closeDropdown();\n    },\n    size,\n    ...comboboxProps\n  }, /* @__PURE__ */React.createElement(Combobox.Target, {\n    targetType: searchable ? \"input\" : \"button\"\n  }, /* @__PURE__ */React.createElement(InputBase, {\n    id: _id,\n    ref,\n    rightSection: rightSection || clearButton || /* @__PURE__ */React.createElement(Combobox.Chevron, {\n      size,\n      error,\n      unstyled\n    }),\n    rightSectionPointerEvents: rightSectionPointerEvents || (clearButton ? \"all\" : \"none\"),\n    ...others,\n    size,\n    __staticSelector: \"Select\",\n    disabled,\n    readOnly: readOnly || !searchable,\n    value: search,\n    onChange: event => {\n      setSearch(event.currentTarget.value);\n      combobox.openDropdown();\n      selectFirstOptionOnChange && combobox.selectFirstOption();\n    },\n    onFocus: event => {\n      searchable && combobox.openDropdown();\n      onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n    },\n    onBlur: event => {\n      var _optionsLockup$_value;\n      searchable && combobox.closeDropdown();\n      setSearch(_value != null ? ((_optionsLockup$_value = optionsLockup[_value]) === null || _optionsLockup$_value === void 0 ? void 0 : _optionsLockup$_value.label) || \"\" : \"\");\n      onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n    },\n    onClick: event => {\n      searchable ? combobox.openDropdown() : combobox.toggleDropdown();\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    },\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    pointer: !searchable,\n    error\n  })), /* @__PURE__ */React.createElement(OptionsDropdown, {\n    data: parsedData,\n    hidden: readOnly || disabled,\n    filter,\n    search,\n    limit,\n    hiddenWhenEmpty: !searchable || !nothingFoundMessage,\n    withScrollArea,\n    maxDropdownHeight,\n    filterOptions: searchable && (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.label) !== search,\n    value: _value,\n    checkIconPosition,\n    withCheckIcon,\n    nothingFoundMessage,\n    unstyled,\n    labelId: \"\".concat(_id, \"-label\")\n  })), /* @__PURE__ */React.createElement(\"input\", {\n    type: \"hidden\",\n    name,\n    value: _value || \"\",\n    form,\n    disabled,\n    ...hiddenInputProps\n  }));\n});\nSelect.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nSelect.displayName = \"@mantine/core/Select\";\nexport { Select };","map":null,"metadata":{},"sourceType":"module"}