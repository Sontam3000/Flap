{"ast":null,"code":"'use client';\n\nimport { keys } from '../../../../core/utils/keys/keys.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../../core/MantineProvider/default-theme.mjs';\nimport '../../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../../core/Box/Box.mjs';\nimport '../../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getBaseSize } from '../get-base-size/get-base-size.mjs';\nimport { getPaddingValue } from '../get-padding-value/get-padding-value.mjs';\nimport { isPrimitiveSize } from '../is-primitive-size/is-primitive-size.mjs';\nimport { isResponsiveSize } from '../is-responsive-size/is-responsive-size.mjs';\nfunction assignPaddingVariables(_ref) {\n  let {\n    padding,\n    baseStyles,\n    minMediaStyles\n  } = _ref;\n  if (isPrimitiveSize(padding)) {\n    baseStyles[\"--app-shell-padding\"] = getPaddingValue(getBaseSize(padding));\n  }\n  if (isResponsiveSize(padding)) {\n    if (padding.base) {\n      baseStyles[\"--app-shell-padding\"] = getPaddingValue(padding.base);\n    }\n    keys(padding).forEach(key => {\n      if (key !== \"base\") {\n        minMediaStyles[key] = minMediaStyles[key] || {};\n        minMediaStyles[key][\"--app-shell-padding\"] = getPaddingValue(padding[key]);\n      }\n    });\n  }\n}\nexport { assignPaddingVariables };","map":null,"metadata":{},"sourceType":"module"}