{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useRef } from 'react';\nimport { assignRef, useMergedRef } from '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nconst defaultProps = {\n  multiple: false\n};\nconst FileButton = forwardRef((props, ref) => {\n  const {\n    onChange,\n    children,\n    multiple,\n    accept,\n    name,\n    form,\n    resetRef,\n    disabled,\n    capture,\n    inputProps,\n    ...others\n  } = useProps(\"FileButton\", defaultProps, props);\n  const inputRef = useRef();\n  const onClick = () => {\n    var _inputRef$current;\n    !disabled && ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click());\n  };\n  const handleChange = event => {\n    if (multiple) {\n      onChange(Array.from(event.currentTarget.files));\n    } else {\n      onChange(event.currentTarget.files[0] || null);\n    }\n  };\n  const reset = () => {\n    inputRef.current.value = \"\";\n  };\n  assignRef(resetRef, reset);\n  return /* @__PURE__ */React.createElement(React.Fragment, null, children({\n    onClick,\n    ...others\n  }), /* @__PURE__ */React.createElement(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    type: \"file\",\n    accept,\n    multiple,\n    onChange: handleChange,\n    ref: useMergedRef(ref, inputRef),\n    name,\n    form,\n    capture,\n    ...inputProps\n  }));\n});\nFileButton.displayName = \"@mantine/core/FileButton\";\nexport { FileButton };","map":null,"metadata":{},"sourceType":"module"}