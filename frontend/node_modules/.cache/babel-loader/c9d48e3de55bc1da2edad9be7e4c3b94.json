{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { getFontSize } from '../../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InputDescription } from '../InputDescription/InputDescription.mjs';\nimport { InputError } from '../InputError/InputError.mjs';\nimport { InputLabel } from '../InputLabel/InputLabel.mjs';\nimport { InputWrapperProvider } from '../InputWrapper.context.mjs';\nimport { getInputOffsets } from './get-input-offsets/get-input-offsets.mjs';\nimport classes from '../Input.module.css.mjs';\nconst defaultProps = {\n  labelElement: \"label\",\n  inputContainer: children => children,\n  inputWrapperOrder: [\"label\", \"description\", \"input\", \"error\"]\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    size\n  } = _ref;\n  return {\n    label: {\n      \"--input-label-size\": getFontSize(size),\n      \"--input-asterisk-color\": void 0\n    },\n    error: {\n      \"--input-error-size\": size === void 0 ? void 0 : \"calc(\".concat(getFontSize(size), \" - \").concat(rem(2), \")\")\n    },\n    description: {\n      \"--input-description-size\": size === void 0 ? void 0 : \"calc(\".concat(getFontSize(size), \" - \").concat(rem(2), \")\")\n    }\n  };\n});\nconst InputWrapper = factory((_props, ref) => {\n  const props = useProps(\"InputWrapper\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    variant,\n    __staticSelector,\n    inputContainer,\n    inputWrapperOrder,\n    label,\n    error,\n    description,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    labelElement,\n    children,\n    withAsterisk,\n    id,\n    required,\n    __stylesApiProps,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: [\"InputWrapper\", __staticSelector],\n    props: __stylesApiProps || props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const sharedProps = {\n    size,\n    variant,\n    __staticSelector\n  };\n  const idBase = useId(id);\n  const isRequired = typeof withAsterisk === \"boolean\" ? withAsterisk : required;\n  const errorId = (errorProps === null || errorProps === void 0 ? void 0 : errorProps.id) || \"\".concat(idBase, \"-error\");\n  const descriptionId = (descriptionProps === null || descriptionProps === void 0 ? void 0 : descriptionProps.id) || \"\".concat(idBase, \"-description\");\n  const inputId = idBase;\n  const hasError = !!error && typeof error !== \"boolean\";\n  const hasDescription = !!description;\n  const _describedBy = \"\".concat(hasError ? errorId : \"\", \" \").concat(hasDescription ? descriptionId : \"\");\n  const describedBy = _describedBy.trim().length > 0 ? _describedBy.trim() : void 0;\n  const labelId = (labelProps === null || labelProps === void 0 ? void 0 : labelProps.id) || \"\".concat(idBase, \"-label\");\n  const _label = label && /* @__PURE__ */React.createElement(InputLabel, {\n    key: \"label\",\n    labelElement,\n    id: labelId,\n    htmlFor: inputId,\n    required: isRequired,\n    ...sharedProps,\n    ...labelProps\n  }, label);\n  const _description = hasDescription && /* @__PURE__ */React.createElement(InputDescription, {\n    key: \"description\",\n    ...descriptionProps,\n    ...sharedProps,\n    size: (descriptionProps === null || descriptionProps === void 0 ? void 0 : descriptionProps.size) || sharedProps.size,\n    id: (descriptionProps === null || descriptionProps === void 0 ? void 0 : descriptionProps.id) || descriptionId\n  }, description);\n  const _input = /* @__PURE__ */React.createElement(React.Fragment, {\n    key: \"input\"\n  }, inputContainer(children));\n  const _error = hasError && /* @__PURE__ */React.createElement(InputError, {\n    ...errorProps,\n    ...sharedProps,\n    size: (errorProps === null || errorProps === void 0 ? void 0 : errorProps.size) || sharedProps.size,\n    key: \"error\",\n    id: (errorProps === null || errorProps === void 0 ? void 0 : errorProps.id) || errorId\n  }, error);\n  const content = inputWrapperOrder.map(part => {\n    switch (part) {\n      case \"label\":\n        return _label;\n      case \"input\":\n        return _input;\n      case \"description\":\n        return _description;\n      case \"error\":\n        return _error;\n      default:\n        return null;\n    }\n  });\n  return /* @__PURE__ */React.createElement(InputWrapperProvider, {\n    value: {\n      getStyles,\n      describedBy,\n      inputId,\n      labelId,\n      ...getInputOffsets(inputWrapperOrder, {\n        hasDescription,\n        hasError\n      })\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ref,\n    variant,\n    size,\n    mod: [{\n      error: !!error\n    }, mod],\n    ...getStyles(\"root\"),\n    ...others\n  }, content));\n});\nInputWrapper.classes = classes;\nInputWrapper.displayName = \"@mantine/core/InputWrapper\";\nexport { InputWrapper };","map":null,"metadata":{},"sourceType":"module"}