{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getNextIndex, getPreviousIndex, getFirstIndex } from './get-index/get-index.mjs';\nfunction useCombobox() {\n  let {\n    defaultOpened,\n    opened,\n    onOpenedChange,\n    onDropdownClose,\n    onDropdownOpen,\n    loop = true,\n    scrollBehavior = \"instant\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange\n  });\n  const listId = useRef(null);\n  const selectedOptionIndex = useRef(-1);\n  const searchRef = useRef(null);\n  const targetRef = useRef(null);\n  const focusSearchTimeout = useRef(-1);\n  const focusTargetTimeout = useRef(-1);\n  const selectedIndexUpdateTimeout = useRef(-1);\n  const openDropdown = useCallback(function () {\n    let eventSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"unknown\";\n    if (!dropdownOpened) {\n      setDropdownOpened(true);\n      onDropdownOpen === null || onDropdownOpen === void 0 ? void 0 : onDropdownOpen(eventSource);\n    }\n  }, [setDropdownOpened, onDropdownOpen, dropdownOpened]);\n  const closeDropdown = useCallback(function () {\n    let eventSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"unknown\";\n    if (dropdownOpened) {\n      setDropdownOpened(false);\n      onDropdownClose === null || onDropdownClose === void 0 ? void 0 : onDropdownClose(eventSource);\n    }\n  }, [setDropdownOpened, onDropdownClose, dropdownOpened]);\n  const toggleDropdown = useCallback(function () {\n    let eventSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"unknown\";\n    if (dropdownOpened) {\n      closeDropdown(eventSource);\n    } else {\n      openDropdown(eventSource);\n    }\n  }, [closeDropdown, openDropdown, dropdownOpened]);\n  const clearSelectedItem = useCallback(() => {\n    const selected = document.querySelector(\"#\".concat(listId.current, \" [data-combobox-selected]\"));\n    selected === null || selected === void 0 ? void 0 : selected.removeAttribute(\"data-combobox-selected\");\n    selected === null || selected === void 0 ? void 0 : selected.removeAttribute(\"aria-selected\");\n  }, []);\n  const selectOption = useCallback(index => {\n    const list = document.getElementById(listId.current);\n    const items = list === null || list === void 0 ? void 0 : list.querySelectorAll(\"[data-combobox-option]\");\n    if (!items) {\n      return null;\n    }\n    const nextIndex = index >= items.length ? 0 : index < 0 ? items.length - 1 : index;\n    selectedOptionIndex.current = nextIndex;\n    if ((items === null || items === void 0 ? void 0 : items[nextIndex]) && !items[nextIndex].hasAttribute(\"data-combobox-disabled\")) {\n      clearSelectedItem();\n      items[nextIndex].setAttribute(\"data-combobox-selected\", \"true\");\n      items[nextIndex].setAttribute(\"aria-selected\", \"true\");\n      items[nextIndex].scrollIntoView({\n        block: \"nearest\",\n        behavior: scrollBehavior\n      });\n      return items[nextIndex].id;\n    }\n    return null;\n  }, [scrollBehavior, clearSelectedItem]);\n  const selectActiveOption = useCallback(() => {\n    const activeOption = document.querySelector(\"#\".concat(listId.current, \" [data-combobox-active]\"));\n    if (activeOption) {\n      const items = document.querySelectorAll(\"#\".concat(listId.current, \" [data-combobox-option]\"));\n      const index = Array.from(items).findIndex(option => option === activeOption);\n      return selectOption(index);\n    }\n    return selectOption(0);\n  }, [selectOption]);\n  const selectNextOption = useCallback(() => selectOption(getNextIndex(selectedOptionIndex.current, document.querySelectorAll(\"#\".concat(listId.current, \" [data-combobox-option]\")), loop)), [selectOption, loop]);\n  const selectPreviousOption = useCallback(() => selectOption(getPreviousIndex(selectedOptionIndex.current, document.querySelectorAll(\"#\".concat(listId.current, \" [data-combobox-option]\")), loop)), [selectOption, loop]);\n  const selectFirstOption = useCallback(() => selectOption(getFirstIndex(document.querySelectorAll(\"#\".concat(listId.current, \" [data-combobox-option]\")))), [selectOption]);\n  const updateSelectedOptionIndex = useCallback(function () {\n    let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"selected\";\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    selectedIndexUpdateTimeout.current = window.setTimeout(() => {\n      const items = document.querySelectorAll(\"#\".concat(listId.current, \" [data-combobox-option]\"));\n      const index = Array.from(items).findIndex(option => option.hasAttribute(\"data-combobox-\".concat(target)));\n      selectedOptionIndex.current = index;\n      if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n        var _items$index;\n        (_items$index = items[index]) === null || _items$index === void 0 ? void 0 : _items$index.scrollIntoView({\n          block: \"nearest\",\n          behavior: scrollBehavior\n        });\n      }\n    }, 0);\n  }, []);\n  const resetSelectedOption = useCallback(() => {\n    selectedOptionIndex.current = -1;\n    clearSelectedItem();\n  }, [clearSelectedItem]);\n  const clickSelectedOption = useCallback(() => {\n    const items = document.querySelectorAll(\"#\".concat(listId.current, \" [data-combobox-option]\"));\n    const item = items === null || items === void 0 ? void 0 : items[selectedOptionIndex.current];\n    item === null || item === void 0 ? void 0 : item.click();\n  }, []);\n  const setListId = useCallback(id => {\n    listId.current = id;\n  }, []);\n  const focusSearchInput = useCallback(() => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current.focus(), 0);\n  }, []);\n  const focusTarget = useCallback(() => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current.focus(), 0);\n  }, []);\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex.current, []);\n  useEffect(() => () => {\n    window.clearTimeout(focusSearchTimeout.current);\n    window.clearTimeout(focusTargetTimeout.current);\n    window.clearTimeout(selectedIndexUpdateTimeout.current);\n  }, []);\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n    selectedOptionIndex: selectedOptionIndex.current,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex,\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n    searchRef,\n    focusSearchInput,\n    targetRef,\n    focusTarget\n  };\n}\nexport { useCombobox };","map":null,"metadata":{},"sourceType":"module"}