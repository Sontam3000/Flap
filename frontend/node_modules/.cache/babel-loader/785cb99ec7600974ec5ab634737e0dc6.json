{"ast":null,"code":"'use client';\n\nimport React, { Children, cloneElement } from 'react';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport { getSize, getSpacing, getRadius, getFontSize } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { StepperProvider } from './Stepper.context.mjs';\nimport { StepperCompleted } from './StepperCompleted/StepperCompleted.mjs';\nimport { StepperStep } from './StepperStep/StepperStep.mjs';\nimport classes from './Stepper.module.css.mjs';\nconst defaultProps = {\n  orientation: \"horizontal\",\n  iconPosition: \"left\",\n  allowNextStepsSelect: true,\n  wrap: true\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    color,\n    iconSize,\n    size,\n    contentPadding,\n    radius,\n    autoContrast\n  } = _ref;\n  return {\n    root: {\n      \"--stepper-color\": color ? getThemeColor(color, theme) : void 0,\n      \"--stepper-icon-color\": getAutoContrastValue(autoContrast, theme) ? getContrastColor({\n        color,\n        theme\n      }) : void 0,\n      \"--stepper-icon-size\": iconSize === void 0 ? getSize(size, \"stepper-icon-size\") : rem(iconSize),\n      \"--stepper-content-padding\": getSpacing(contentPadding),\n      \"--stepper-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--stepper-fz\": getFontSize(size),\n      \"--stepper-spacing\": getSpacing(size)\n    }\n  };\n});\nconst Stepper = factory((_props, ref) => {\n  var _children$active, _children$active$prop, _completedStep$props;\n  const props = useProps(\"Stepper\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    onStepClick,\n    active,\n    icon,\n    completedIcon,\n    progressIcon,\n    color,\n    iconSize,\n    contentPadding,\n    orientation,\n    iconPosition,\n    size,\n    radius,\n    allowNextStepsSelect,\n    wrap,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Stepper\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const convertedChildren = Children.toArray(children);\n  const _children = convertedChildren.filter(child => child.type !== StepperCompleted);\n  const completedStep = convertedChildren.find(item => item.type === StepperCompleted);\n  const items = _children.reduce((acc, item, index) => {\n    const state = active === index ? \"stepProgress\" : active > index ? \"stepCompleted\" : \"stepInactive\";\n    const shouldAllowSelect = () => {\n      if (typeof onStepClick !== \"function\") {\n        return false;\n      }\n      if (typeof item.props.allowStepSelect === \"boolean\") {\n        return item.props.allowStepSelect;\n      }\n      return state === \"stepCompleted\" || allowNextStepsSelect;\n    };\n    const isStepSelectionEnabled = shouldAllowSelect();\n    acc.push(cloneElement(item, {\n      icon: item.props.icon || icon || index + 1,\n      key: index,\n      step: index,\n      state,\n      onClick: () => isStepSelectionEnabled && (onStepClick === null || onStepClick === void 0 ? void 0 : onStepClick(index)),\n      allowStepClick: isStepSelectionEnabled,\n      completedIcon: item.props.completedIcon || completedIcon,\n      progressIcon: item.props.progressIcon || progressIcon,\n      color: item.props.color || color,\n      iconSize,\n      radius,\n      iconPosition: item.props.iconPosition || iconPosition,\n      orientation,\n      unstyled\n    }));\n    if (orientation === \"horizontal\" && index !== _children.length - 1) {\n      acc.push( /* @__PURE__ */React.createElement(\"div\", {\n        ...getStyles(\"separator\"),\n        \"data-active\": index < active || void 0,\n        \"data-orientation\": orientation,\n        key: \"separator-\".concat(index)\n      }));\n    }\n    return acc;\n  }, []);\n  const stepContent = (_children$active = _children[active]) === null || _children$active === void 0 ? void 0 : (_children$active$prop = _children$active.props) === null || _children$active$prop === void 0 ? void 0 : _children$active$prop.children;\n  const completedContent = completedStep === null || completedStep === void 0 ? void 0 : (_completedStep$props = completedStep.props) === null || _completedStep$props === void 0 ? void 0 : _completedStep$props.children;\n  const content = active > _children.length - 1 ? completedContent : stepContent;\n  return /* @__PURE__ */React.createElement(StepperProvider, {\n    value: {\n      getStyles,\n      orientation,\n      iconPosition\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\"),\n    ref,\n    size,\n    ...others\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"steps\"),\n    mod: {\n      orientation,\n      \"icon-position\": iconPosition,\n      wrap: wrap && orientation !== \"vertical\"\n    }\n  }, items), content && /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"content\")\n  }, content)));\n});\nStepper.classes = classes;\nStepper.displayName = \"@mantine/core/Stepper\";\nStepper.Completed = StepperCompleted;\nStepper.Step = StepperStep;\nexport { Stepper };","map":null,"metadata":{},"sourceType":"module"}