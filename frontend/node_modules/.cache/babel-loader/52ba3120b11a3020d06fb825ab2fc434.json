{"ast":null,"code":"'use client';\n\nimport { useFloating, offset, shift, limitShift, flip, inline, arrow, size } from '@floating-ui/react';\nimport { useUncontrolled, useDidUpdate } from '@mantine/hooks';\nimport 'react';\nimport { useFloatingAutoUpdate } from '../Floating/use-floating-auto-update.mjs';\nimport '../Floating/FloatingArrow/FloatingArrow.mjs';\nfunction getPopoverMiddlewares(options, getFloating) {\n  var _options$middlewares, _options$middlewares2, _options$middlewares3, _options$middlewares4;\n  const middlewares = [offset(options.offset)];\n  if ((_options$middlewares = options.middlewares) === null || _options$middlewares === void 0 ? void 0 : _options$middlewares.shift) {\n    middlewares.push(shift({\n      limiter: limitShift()\n    }));\n  }\n  if ((_options$middlewares2 = options.middlewares) === null || _options$middlewares2 === void 0 ? void 0 : _options$middlewares2.flip) {\n    middlewares.push(flip());\n  }\n  if ((_options$middlewares3 = options.middlewares) === null || _options$middlewares3 === void 0 ? void 0 : _options$middlewares3.inline) {\n    middlewares.push(inline());\n  }\n  middlewares.push(arrow({\n    element: options.arrowRef,\n    padding: options.arrowOffset\n  }));\n  if (((_options$middlewares4 = options.middlewares) === null || _options$middlewares4 === void 0 ? void 0 : _options$middlewares4.size) || options.width === \"target\") {\n    middlewares.push(size({\n      apply(_ref) {\n        var _floating$refs$floati, _floating$refs$floati2, _options$middlewares5;\n        let {\n          rects,\n          availableWidth,\n          availableHeight\n        } = _ref;\n        const floating = getFloating();\n        const styles = (_floating$refs$floati = (_floating$refs$floati2 = floating.refs.floating.current) === null || _floating$refs$floati2 === void 0 ? void 0 : _floating$refs$floati2.style) !== null && _floating$refs$floati !== void 0 ? _floating$refs$floati : {};\n        if ((_options$middlewares5 = options.middlewares) === null || _options$middlewares5 === void 0 ? void 0 : _options$middlewares5.size) {\n          Object.assign(styles, {\n            maxWidth: \"\".concat(availableWidth, \"px\"),\n            maxHeight: \"\".concat(availableHeight, \"px\")\n          });\n        }\n        if (options.width === \"target\") {\n          Object.assign(styles, {\n            width: \"\".concat(rects.reference.width, \"px\")\n          });\n        }\n      }\n    }));\n  }\n  return middlewares;\n}\nfunction usePopover(options) {\n  const [_opened, setOpened] = useUncontrolled({\n    value: options.opened,\n    defaultValue: options.defaultOpened,\n    finalValue: false,\n    onChange: options.onChange\n  });\n  const onClose = () => {\n    if (_opened) {\n      var _options$onClose;\n      (_options$onClose = options.onClose) === null || _options$onClose === void 0 ? void 0 : _options$onClose.call(options);\n      setOpened(false);\n    }\n  };\n  const onToggle = () => {\n    if (_opened) {\n      var _options$onClose2;\n      (_options$onClose2 = options.onClose) === null || _options$onClose2 === void 0 ? void 0 : _options$onClose2.call(options);\n      setOpened(false);\n    } else {\n      var _options$onOpen;\n      (_options$onOpen = options.onOpen) === null || _options$onOpen === void 0 ? void 0 : _options$onOpen.call(options);\n      setOpened(true);\n    }\n  };\n  const floating = useFloating({\n    placement: options.position,\n    middleware: getPopoverMiddlewares(options, () => floating)\n  });\n  useFloatingAutoUpdate({\n    opened: options.opened,\n    position: options.position,\n    positionDependencies: options.positionDependencies || [],\n    floating\n  });\n  useDidUpdate(() => {\n    var _options$onPositionCh;\n    (_options$onPositionCh = options.onPositionChange) === null || _options$onPositionCh === void 0 ? void 0 : _options$onPositionCh.call(options, floating.placement);\n  }, [floating.placement]);\n  useDidUpdate(() => {\n    if (!options.opened) {\n      var _options$onClose3;\n      (_options$onClose3 = options.onClose) === null || _options$onClose3 === void 0 ? void 0 : _options$onClose3.call(options);\n    } else {\n      var _options$onOpen2;\n      (_options$onOpen2 = options.onOpen) === null || _options$onOpen2 === void 0 ? void 0 : _options$onOpen2.call(options);\n    }\n  }, [options.opened]);\n  return {\n    floating,\n    controlled: typeof options.opened === \"boolean\",\n    opened: _opened,\n    onClose,\n    onToggle\n  };\n}\nexport { usePopover };","map":null,"metadata":{},"sourceType":"module"}