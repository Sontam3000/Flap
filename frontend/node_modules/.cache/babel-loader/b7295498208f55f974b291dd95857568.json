{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { getRadius, getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InlineInputClasses, InlineInput } from '../InlineInput/InlineInput.mjs';\nimport { useSwitchGroupContext } from './SwitchGroup.context.mjs';\nimport { SwitchGroup } from './SwitchGroup/SwitchGroup.mjs';\nimport classes from './Switch.module.css.mjs';\nconst defaultProps = {\n  labelPosition: \"right\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    radius,\n    color,\n    size\n  } = _ref;\n  return {\n    root: {\n      \"--switch-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--switch-height\": getSize(size, \"switch-height\"),\n      \"--switch-width\": getSize(size, \"switch-width\"),\n      \"--switch-thumb-size\": getSize(size, \"switch-thumb-size\"),\n      \"--switch-label-font-size\": getSize(size, \"switch-label-font-size\"),\n      \"--switch-track-label-padding\": getSize(size, \"switch-track-label-padding\"),\n      \"--switch-color\": color ? getThemeColor(color, theme) : void 0\n    }\n  };\n});\nconst Switch = factory((_props, ref) => {\n  var _contextProps$checked;\n  const props = useProps(\"Switch\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    label,\n    offLabel,\n    onLabel,\n    id,\n    size,\n    radius,\n    wrapperProps,\n    children,\n    thumbIcon,\n    checked,\n    defaultChecked,\n    onChange,\n    labelPosition,\n    description,\n    error,\n    disabled,\n    variant,\n    rootRef,\n    mod,\n    ...others\n  } = props;\n  const ctx = useSwitchGroupContext();\n  const _size = size || (ctx === null || ctx === void 0 ? void 0 : ctx.size);\n  const getStyles = useStyles({\n    name: \"Switch\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const uuid = useId(id);\n  const contextProps = ctx ? {\n    checked: ctx.value.includes(rest.value),\n    onChange: ctx.onChange\n  } : {};\n  const [_checked, handleChange] = useUncontrolled({\n    value: (_contextProps$checked = contextProps.checked) !== null && _contextProps$checked !== void 0 ? _contextProps$checked : checked,\n    defaultValue: defaultChecked,\n    finalValue: false\n  });\n  return /* @__PURE__ */React.createElement(InlineInput, {\n    ...getStyles(\"root\"),\n    __staticSelector: \"Switch\",\n    __stylesApiProps: props,\n    id: uuid,\n    size: _size,\n    labelPosition,\n    label,\n    description,\n    error,\n    disabled,\n    classNames,\n    styles,\n    unstyled,\n    \"data-checked\": contextProps.checked || void 0,\n    variant,\n    ref: rootRef,\n    mod,\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(\"input\", {\n    ...rest,\n    disabled,\n    checked: _checked,\n    onChange: event => {\n      var _contextProps$onChang;\n      ctx ? (_contextProps$onChang = contextProps.onChange) === null || _contextProps$onChang === void 0 ? void 0 : _contextProps$onChang.call(contextProps, event) : onChange === null || onChange === void 0 ? void 0 : onChange(event);\n      handleChange(event.currentTarget.checked);\n    },\n    id: uuid,\n    ref,\n    type: \"checkbox\",\n    ...getStyles(\"input\")\n  }), /* @__PURE__ */React.createElement(Box, {\n    component: \"label\",\n    htmlFor: uuid,\n    mod: {\n      error,\n      \"label-position\": labelPosition\n    },\n    ...getStyles(\"track\")\n  }, /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    mod: \"reduce-motion\",\n    ...getStyles(\"thumb\")\n  }, thumbIcon), /* @__PURE__ */React.createElement(\"span\", {\n    ...getStyles(\"trackLabel\")\n  }, _checked ? onLabel : offLabel)));\n});\nSwitch.classes = {\n  ...classes,\n  ...InlineInputClasses\n};\nSwitch.displayName = \"@mantine/core/Switch\";\nSwitch.Group = SwitchGroup;\nexport { Switch };","map":null,"metadata":{},"sourceType":"module"}