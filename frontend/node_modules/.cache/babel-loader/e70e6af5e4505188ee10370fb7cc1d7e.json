{"ast":null,"code":"'use client';\n\nimport { round } from './parsers.mjs';\nfunction hsvaToRgbaObject(_ref) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref;\n  const _h = h / 360 * 6;\n  const _s = s / 100;\n  const _v = v / 100;\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2)\n  };\n}\nfunction hsvaToRgba(color, includeAlpha) {\n  const {\n    r,\n    g,\n    b,\n    a\n  } = hsvaToRgbaObject(color);\n  if (!includeAlpha) {\n    return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n  }\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(round(a, 2), \")\");\n}\nfunction hsvaToHsl(_ref2, includeAlpha) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref2;\n  const hh = (200 - s) * v / 100;\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? s * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),\n    l: Math.round(hh / 2)\n  };\n  if (!includeAlpha) {\n    return \"hsl(\".concat(result.h, \", \").concat(result.s, \"%, \").concat(result.l, \"%)\");\n  }\n  return \"hsla(\".concat(result.h, \", \").concat(result.s, \"%, \").concat(result.l, \"%, \").concat(round(a, 2), \")\");\n}\nfunction formatHexPart(number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? \"0\".concat(hex) : hex;\n}\nfunction hsvaToHex(color) {\n  const {\n    r,\n    g,\n    b\n  } = hsvaToRgbaObject(color);\n  return \"#\".concat(formatHexPart(r)).concat(formatHexPart(g)).concat(formatHexPart(b));\n}\nfunction hsvaToHexa(color) {\n  const a = Math.round(color.a * 255);\n  return \"\".concat(hsvaToHex(color)).concat(formatHexPart(a));\n}\nconst CONVERTERS = {\n  hex: hsvaToHex,\n  hexa: color => hsvaToHexa(color),\n  rgb: color => hsvaToRgba(color, false),\n  rgba: color => hsvaToRgba(color, true),\n  hsl: color => hsvaToHsl(color, false),\n  hsla: color => hsvaToHsl(color, true)\n};\nfunction convertHsvaTo(format, color) {\n  if (!color) {\n    return \"#000000\";\n  }\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n  return CONVERTERS[format](color);\n}\nexport { convertHsvaTo, hsvaToHex, hsvaToHexa, hsvaToHsl, hsvaToRgba, hsvaToRgbaObject };","map":null,"metadata":{},"sourceType":"module"}