{"ast":null,"code":"'use client';\n\nimport { rem } from '../../../utils/units-converters/rem.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport { darken } from '../darken/darken.mjs';\nimport { getGradient } from '../get-gradient/get-gradient.mjs';\nimport { parseThemeColor } from '../parse-theme-color/parse-theme-color.mjs';\nimport { rgba } from '../rgba/rgba.mjs';\nconst defaultVariantColorsResolver = _ref => {\n  let {\n    color,\n    theme,\n    variant,\n    gradient,\n    autoContrast\n  } = _ref;\n  const parsed = parseThemeColor({\n    color,\n    theme\n  });\n  const _autoContrast = typeof autoContrast === \"boolean\" ? autoContrast : theme.autoContrast;\n  if (variant === \"filled\") {\n    const textColor = _autoContrast ? parsed.isLight ? \"var(--mantine-color-black)\" : \"var(--mantine-color-white)\" : \"var(--mantine-color-white)\";\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"var(--mantine-color-\".concat(color, \"-filled)\"),\n          hover: \"var(--mantine-color-\".concat(color, \"-filled-hover)\"),\n          color: textColor,\n          border: \"\".concat(rem(1), \" solid transparent\")\n        };\n      }\n      return {\n        background: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(parsed.shade, \")\"),\n        hover: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(parsed.shade === 9 ? 8 : parsed.shade + 1, \")\"),\n        color: textColor,\n        border: \"\".concat(rem(1), \" solid transparent\")\n      };\n    }\n    return {\n      background: color,\n      hover: darken(color, 0.1),\n      color: textColor,\n      border: \"\".concat(rem(1), \" solid transparent\")\n    };\n  }\n  if (variant === \"light\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"var(--mantine-color-\".concat(color, \"-light)\"),\n          hover: \"var(--mantine-color-\".concat(color, \"-light-hover)\"),\n          color: \"var(--mantine-color-\".concat(color, \"-light-color)\"),\n          border: \"\".concat(rem(1), \" solid transparent\")\n        };\n      }\n      const parsedColor = theme.colors[parsed.color][parsed.shade];\n      return {\n        background: rgba(parsedColor, 0.1),\n        hover: rgba(parsedColor, 0.12),\n        color: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(Math.min(parsed.shade, 6), \")\"),\n        border: \"\".concat(rem(1), \" solid transparent\")\n      };\n    }\n    return {\n      background: rgba(color, 0.1),\n      hover: rgba(color, 0.12),\n      color,\n      border: \"\".concat(rem(1), \" solid transparent\")\n    };\n  }\n  if (variant === \"outline\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"transparent\",\n          hover: \"var(--mantine-color-\".concat(color, \"-outline-hover)\"),\n          color: \"var(--mantine-color-\".concat(color, \"-outline)\"),\n          border: \"\".concat(rem(1), \" solid var(--mantine-color-\").concat(color, \"-outline)\")\n        };\n      }\n      return {\n        background: \"transparent\",\n        hover: rgba(theme.colors[parsed.color][parsed.shade], 0.05),\n        color: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(parsed.shade, \")\"),\n        border: \"\".concat(rem(1), \" solid var(--mantine-color-\").concat(parsed.color, \"-\").concat(parsed.shade, \")\")\n      };\n    }\n    return {\n      background: \"transparent\",\n      hover: rgba(color, 0.05),\n      color,\n      border: \"\".concat(rem(1), \" solid \").concat(color)\n    };\n  }\n  if (variant === \"subtle\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"transparent\",\n          hover: \"var(--mantine-color-\".concat(color, \"-light-hover)\"),\n          color: \"var(--mantine-color-\".concat(color, \"-light-color)\"),\n          border: \"\".concat(rem(1), \" solid transparent\")\n        };\n      }\n      const parsedColor = theme.colors[parsed.color][parsed.shade];\n      return {\n        background: \"transparent\",\n        hover: rgba(parsedColor, 0.12),\n        color: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(Math.min(parsed.shade, 6), \")\"),\n        border: \"\".concat(rem(1), \" solid transparent\")\n      };\n    }\n    return {\n      background: \"transparent\",\n      hover: rgba(color, 0.12),\n      color,\n      border: \"\".concat(rem(1), \" solid transparent\")\n    };\n  }\n  if (variant === \"transparent\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"transparent\",\n          hover: \"transparent\",\n          color: \"var(--mantine-color-\".concat(color, \"-light-color)\"),\n          border: \"\".concat(rem(1), \" solid transparent\")\n        };\n      }\n      return {\n        background: \"transparent\",\n        hover: \"transparent\",\n        color: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(Math.min(parsed.shade, 6), \")\"),\n        border: \"\".concat(rem(1), \" solid transparent\")\n      };\n    }\n    return {\n      background: \"transparent\",\n      hover: \"transparent\",\n      color,\n      border: \"\".concat(rem(1), \" solid transparent\")\n    };\n  }\n  if (variant === \"white\") {\n    if (parsed.isThemeColor) {\n      if (parsed.shade === void 0) {\n        return {\n          background: \"var(--mantine-color-white)\",\n          hover: darken(theme.white, 0.01),\n          color: \"var(--mantine-color-\".concat(color, \"-filled)\"),\n          border: \"\".concat(rem(1), \" solid transparent\")\n        };\n      }\n      return {\n        background: \"var(--mantine-color-white)\",\n        hover: darken(theme.white, 0.01),\n        color: \"var(--mantine-color-\".concat(parsed.color, \"-\").concat(parsed.shade, \")\"),\n        border: \"\".concat(rem(1), \" solid transparent\")\n      };\n    }\n    return {\n      background: \"var(--mantine-color-white)\",\n      hover: darken(theme.white, 0.01),\n      color,\n      border: \"\".concat(rem(1), \" solid transparent\")\n    };\n  }\n  if (variant === \"gradient\") {\n    return {\n      background: getGradient(gradient, theme),\n      hover: getGradient(gradient, theme),\n      color: \"var(--mantine-color-white)\",\n      border: \"none\"\n    };\n  }\n  if (variant === \"default\") {\n    return {\n      background: \"var(--mantine-color-default)\",\n      hover: \"var(--mantine-color-default-hover)\",\n      color: \"var(--mantine-color-default-color)\",\n      border: \"\".concat(rem(1), \" solid var(--mantine-color-default-border)\")\n    };\n  }\n  return {};\n};\nexport { defaultVariantColorsResolver };","map":null,"metadata":{},"sourceType":"module"}