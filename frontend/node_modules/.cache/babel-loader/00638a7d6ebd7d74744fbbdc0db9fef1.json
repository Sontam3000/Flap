{"ast":null,"code":"'use client';\n\nimport { useRef, useContext, useCallback, useEffect } from 'react';\nimport { useColorScheme } from '@mantine/hooks';\nimport { MantineContext } from '../Mantine.context.mjs';\nfunction disableTransition() {\n  const style = document.createElement(\"style\");\n  style.innerHTML = \"*, *::before, *::after {transition: none !important;}\";\n  style.setAttribute(\"data-mantine-disable-transition\", \"true\");\n  document.head.appendChild(style);\n  const clear = () => document.querySelectorAll(\"[data-mantine-disable-transition]\").forEach(element => element.remove());\n  return clear;\n}\nfunction useMantineColorScheme() {\n  let {\n    keepTransitions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const clearStylesRef = useRef();\n  const timeoutRef = useRef();\n  const ctx = useContext(MantineContext);\n  if (!ctx) {\n    throw new Error(\"[@mantine/core] MantineProvider was not found in tree\");\n  }\n  const setColorScheme = value => {\n    ctx.setColorScheme(value);\n    clearStylesRef.current = keepTransitions ? () => {} : disableTransition();\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      var _clearStylesRef$curre;\n      (_clearStylesRef$curre = clearStylesRef.current) === null || _clearStylesRef$curre === void 0 ? void 0 : _clearStylesRef$curre.call(clearStylesRef);\n    }, 10);\n  };\n  const clearColorScheme = () => {\n    ctx.clearColorScheme();\n    clearStylesRef.current = keepTransitions ? () => {} : disableTransition();\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      var _clearStylesRef$curre2;\n      (_clearStylesRef$curre2 = clearStylesRef.current) === null || _clearStylesRef$curre2 === void 0 ? void 0 : _clearStylesRef$curre2.call(clearStylesRef);\n    }, 10);\n  };\n  const osColorScheme = useColorScheme(\"light\", {\n    getInitialValueInEffect: false\n  });\n  const computedColorScheme = ctx.colorScheme === \"auto\" ? osColorScheme : ctx.colorScheme;\n  const toggleColorScheme = useCallback(() => setColorScheme(computedColorScheme === \"light\" ? \"dark\" : \"light\"), [setColorScheme, computedColorScheme]);\n  useEffect(() => () => {\n    var _clearStylesRef$curre3;\n    (_clearStylesRef$curre3 = clearStylesRef.current) === null || _clearStylesRef$curre3 === void 0 ? void 0 : _clearStylesRef$curre3.call(clearStylesRef);\n    window.clearTimeout(timeoutRef.current);\n  }, []);\n  return {\n    colorScheme: ctx.colorScheme,\n    setColorScheme,\n    clearColorScheme,\n    toggleColorScheme\n  };\n}\nexport { useMantineColorScheme };","map":null,"metadata":{},"sourceType":"module"}