{"ast":null,"code":"'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMove, clampUseMovePosition } from '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useColorPickerContext } from '../ColorPicker.context.mjs';\nimport { convertHsvaTo } from '../converters/converters.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nfunction Saturation(_ref) {\n  let {\n    className,\n    onChange,\n    onChangeEnd,\n    value,\n    saturationLabel,\n    focusable = true,\n    size,\n    color,\n    onScrubStart,\n    onScrubEnd,\n    ...others\n  } = _ref;\n  const {\n    getStyles\n  } = useColorPickerContext();\n  const [position, setPosition] = useState({\n    x: value.s / 100,\n    y: 1 - value.v / 100\n  });\n  const positionRef = useRef(position);\n  const {\n    ref\n  } = useMove(_ref2 => {\n    let {\n      x,\n      y\n    } = _ref2;\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange({\n      s: Math.round(x * 100),\n      v: Math.round((1 - y) * 100)\n    });\n  }, {\n    onScrubEnd: () => {\n      const {\n        x,\n        y\n      } = positionRef.current;\n      onChangeEnd({\n        s: Math.round(x * 100),\n        v: Math.round((1 - y) * 100)\n      });\n      onScrubEnd === null || onScrubEnd === void 0 ? void 0 : onScrubEnd();\n    },\n    onScrubStart\n  });\n  useEffect(() => {\n    setPosition({\n      x: value.s / 100,\n      y: 1 - value.v / 100\n    });\n  }, [value.s, value.v]);\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange({\n      s: Math.round(_position.x * 100),\n      v: Math.round((1 - _position.y) * 100)\n    });\n    onChangeEnd({\n      s: Math.round(_position.x * 100),\n      v: Math.round((1 - _position.y) * 100)\n    });\n  };\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowUp\":\n        {\n          handleArrow(event, {\n            y: position.y - 0.05,\n            x: position.x\n          });\n          break;\n        }\n      case \"ArrowDown\":\n        {\n          handleArrow(event, {\n            y: position.y + 0.05,\n            x: position.x\n          });\n          break;\n        }\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n  return /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"saturation\"),\n    ref,\n    ...others,\n    role: \"slider\",\n    \"aria-label\": saturationLabel,\n    \"aria-valuenow\": position.x,\n    \"aria-valuetext\": convertHsvaTo(\"rgba\", value),\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"saturationOverlay\", {\n      style: {\n        backgroundColor: \"hsl(\".concat(value.h, \", 100%, 50%)\")\n      }\n    })\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"saturationOverlay\", {\n      style: {\n        backgroundImage: \"linear-gradient(90deg, #fff, transparent)\"\n      }\n    })\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"saturationOverlay\", {\n      style: {\n        backgroundImage: \"linear-gradient(0deg, #000, transparent)\"\n      }\n    })\n  }), /* @__PURE__ */React.createElement(Thumb, {\n    position,\n    ...getStyles(\"thumb\", {\n      style: {\n        backgroundColor: color\n      }\n    })\n  }));\n}\nSaturation.displayName = \"@mantine/core/Saturation\";\nexport { Saturation };","map":null,"metadata":{},"sourceType":"module"}