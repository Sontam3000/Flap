{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { convertCssVariables } from '../convert-css-variables/convert-css-variables.mjs';\nimport { useMantineStyleNonce, useMantineCssVariablesResolver } from '../Mantine.context.mjs';\nimport { useMantineTheme } from '../MantineThemeProvider/MantineThemeProvider.mjs';\nimport { getMergedVariables } from './get-merged-variables.mjs';\nimport { removeDefaultVariables } from './remove-default-variables.mjs';\nfunction getColorSchemeCssVariables(selector) {\n  return \"\\n  \".concat(selector, \"[data-mantine-color-scheme=\\\"dark\\\"] { --mantine-color-scheme: dark; }\\n  \").concat(selector, \"[data-mantine-color-scheme=\\\"light\\\"] { --mantine-color-scheme: light; }\\n\");\n}\nfunction MantineCssVariables(_ref) {\n  let {\n    cssVariablesSelector\n  } = _ref;\n  const theme = useMantineTheme();\n  const nonce = useMantineStyleNonce();\n  const generator = useMantineCssVariablesResolver();\n  const mergedVariables = getMergedVariables({\n    theme,\n    generator\n  });\n  const shouldCleanVariables = cssVariablesSelector === \":root\";\n  const cleanedVariables = shouldCleanVariables ? removeDefaultVariables(mergedVariables) : mergedVariables;\n  const css = convertCssVariables(cleanedVariables, cssVariablesSelector);\n  if (css) {\n    return /* @__PURE__ */React.createElement(\"style\", {\n      \"data-mantine-styles\": true,\n      nonce: nonce === null || nonce === void 0 ? void 0 : nonce(),\n      dangerouslySetInnerHTML: {\n        __html: \"\".concat(css).concat(shouldCleanVariables ? \"\" : getColorSchemeCssVariables(cssVariablesSelector))\n      }\n    });\n  }\n  return null;\n}\nMantineCssVariables.displayName = \"@mantine/CssVariables\";\nexport { MantineCssVariables };","map":null,"metadata":{},"sourceType":"module"}