{"ast":null,"code":"'use client';\n\nimport React, { useRef } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { createScopedKeydownHandler } from '../../../core/utils/create-scoped-keydown-handler/create-scoped-keydown-handler.mjs';\nimport { createEventHandler } from '../../../core/utils/create-event-handler/create-event-handler.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { polymorphicFactory } from '../../../core/factory/polymorphic-factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { UnstyledButton } from '../../UnstyledButton/UnstyledButton.mjs';\nimport { useMenuContext } from '../Menu.context.mjs';\nimport classes from '../Menu.module.css.mjs';\nconst defaultProps = {};\nconst MenuItem = polymorphicFactory((props, ref) => {\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    color,\n    closeMenuOnClick,\n    leftSection,\n    rightSection,\n    children,\n    disabled,\n    ...others\n  } = useProps(\"MenuItem\", defaultProps, props);\n  const ctx = useMenuContext();\n  const theme = useMantineTheme();\n  const {\n    dir\n  } = useDirection();\n  const itemRef = useRef();\n  const itemIndex = ctx.getItemIndex(itemRef.current);\n  const _others = others;\n  const handleMouseLeave = createEventHandler(_others.onMouseLeave, () => ctx.setHovered(-1));\n  const handleMouseEnter = createEventHandler(_others.onMouseEnter, () => ctx.setHovered(ctx.getItemIndex(itemRef.current)));\n  const handleClick = createEventHandler(_others.onClick, () => {\n    if (typeof closeMenuOnClick === \"boolean\") {\n      closeMenuOnClick && ctx.closeDropdownImmediately();\n    } else {\n      ctx.closeOnItemClick && ctx.closeDropdownImmediately();\n    }\n  });\n  const handleFocus = createEventHandler(_others.onFocus, () => ctx.setHovered(ctx.getItemIndex(itemRef.current)));\n  const colors = color ? theme.variantColorResolver({\n    color,\n    theme,\n    variant: \"light\"\n  }) : void 0;\n  const parsedThemeColor = color ? parseThemeColor({\n    color,\n    theme\n  }) : null;\n  return /* @__PURE__ */React.createElement(UnstyledButton, {\n    ...others,\n    unstyled: ctx.unstyled,\n    tabIndex: ctx.menuItemTabIndex,\n    onFocus: handleFocus,\n    ...ctx.getStyles(\"item\", {\n      className,\n      style,\n      styles,\n      classNames\n    }),\n    ref: useMergedRef(itemRef, ref),\n    role: \"menuitem\",\n    disabled,\n    \"data-menu-item\": true,\n    \"data-disabled\": disabled || void 0,\n    \"data-hovered\": ctx.hovered === itemIndex ? true : void 0,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick,\n    onKeyDown: createScopedKeydownHandler({\n      siblingSelector: \"[data-menu-item]\",\n      parentSelector: \"[data-menu-dropdown]\",\n      activateOnFocus: false,\n      loop: ctx.loop,\n      dir,\n      orientation: \"vertical\",\n      onKeyDown: _others.onKeydown\n    }),\n    __vars: {\n      \"--menu-item-color\": (parsedThemeColor === null || parsedThemeColor === void 0 ? void 0 : parsedThemeColor.isThemeColor) && (parsedThemeColor === null || parsedThemeColor === void 0 ? void 0 : parsedThemeColor.shade) === void 0 ? \"var(--mantine-color-\".concat(parsedThemeColor.color, \"-6)\") : colors === null || colors === void 0 ? void 0 : colors.color,\n      \"--menu-item-hover\": colors === null || colors === void 0 ? void 0 : colors.hover\n    }\n  }, leftSection && /* @__PURE__ */React.createElement(\"div\", {\n    ...ctx.getStyles(\"itemSection\", {\n      styles,\n      classNames\n    }),\n    \"data-position\": \"left\"\n  }, leftSection), children && /* @__PURE__ */React.createElement(\"div\", {\n    ...ctx.getStyles(\"itemLabel\", {\n      styles,\n      classNames\n    })\n  }, children), rightSection && /* @__PURE__ */React.createElement(\"div\", {\n    ...ctx.getStyles(\"itemSection\", {\n      styles,\n      classNames\n    }),\n    \"data-position\": \"right\"\n  }, rightSection));\n});\nMenuItem.classes = classes;\nMenuItem.displayName = \"@mantine/core/MenuItem\";\nexport { MenuItem };","map":null,"metadata":{},"sourceType":"module"}