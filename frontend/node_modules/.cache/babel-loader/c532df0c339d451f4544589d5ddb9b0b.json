{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, cloneElement } from 'react';\nimport { isElement } from '../../../core/utils/is-element/is-element.mjs';\nimport { createEventHandler } from '../../../core/utils/create-event-handler/create-event-handler.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Popover } from '../../Popover/Popover.mjs';\nimport '../../Popover/PopoverDropdown/PopoverDropdown.mjs';\nimport '../../Popover/PopoverTarget/PopoverTarget.mjs';\nimport { useMenuContext } from '../Menu.context.mjs';\nconst defaultProps = {\n  refProp: \"ref\"\n};\nconst MenuTarget = forwardRef((props, ref) => {\n  const {\n    children,\n    refProp,\n    ...others\n  } = useProps(\"MenuTarget\", defaultProps, props);\n  if (!isElement(children)) {\n    throw new Error(\"Menu.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const ctx = useMenuContext();\n  const onClick = createEventHandler(children.props.onClick, () => {\n    if (ctx.trigger === \"click\") {\n      ctx.toggleDropdown();\n    } else if (ctx.trigger === \"click-hover\") {\n      ctx.setOpenedViaClick(true);\n      if (!ctx.opened) {\n        ctx.openDropdown();\n      }\n    }\n  });\n  const onMouseEnter = createEventHandler(children.props.onMouseEnter, () => (ctx.trigger === \"hover\" || ctx.trigger === \"click-hover\") && ctx.openDropdown());\n  const onMouseLeave = createEventHandler(children.props.onMouseLeave, () => {\n    if (ctx.trigger === \"hover\") {\n      ctx.closeDropdown();\n    } else if (ctx.trigger === \"click-hover\" && !ctx.openedViaClick) {\n      ctx.closeDropdown();\n    }\n  });\n  return /* @__PURE__ */React.createElement(Popover.Target, {\n    refProp,\n    popupType: \"menu\",\n    ref,\n    ...others\n  }, cloneElement(children, {\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    \"data-expanded\": ctx.opened ? true : void 0\n  }));\n});\nMenuTarget.displayName = \"@mantine/core/MenuTarget\";\nexport { MenuTarget };","map":null,"metadata":{},"sourceType":"module"}