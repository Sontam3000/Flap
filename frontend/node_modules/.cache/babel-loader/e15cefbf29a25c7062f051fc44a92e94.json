{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { getFontSize } from '../../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useInputWrapperContext } from '../InputWrapper.context.mjs';\nimport classes from '../Input.module.css.mjs';\nconst defaultProps = {\n  labelElement: \"label\"\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    size\n  } = _ref;\n  return {\n    label: {\n      \"--input-label-size\": getFontSize(size),\n      \"--input-asterisk-color\": void 0\n    }\n  };\n});\nconst InputLabel = factory((_props, ref) => {\n  const props = useProps(\"InputLabel\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    labelElement,\n    size,\n    required,\n    htmlFor,\n    onMouseDown,\n    children,\n    __staticSelector,\n    variant,\n    mod,\n    ...others\n  } = useProps(\"InputLabel\", defaultProps, props);\n  const _getStyles = useStyles({\n    name: [\"InputWrapper\", __staticSelector],\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"label\",\n    vars,\n    varsResolver\n  });\n  const ctx = useInputWrapperContext();\n  const getStyles = (ctx === null || ctx === void 0 ? void 0 : ctx.getStyles) || _getStyles;\n  return /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"label\"),\n    component: labelElement,\n    variant,\n    size,\n    ref,\n    htmlFor: labelElement === \"label\" ? htmlFor : void 0,\n    mod: [{\n      required\n    }, mod],\n    onMouseDown: event => {\n      onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);\n      if (!event.defaultPrevented && event.detail > 1) {\n        event.preventDefault();\n      }\n    },\n    ...others\n  }, children, required && /* @__PURE__ */React.createElement(\"span\", {\n    ...getStyles(\"required\"),\n    \"aria-hidden\": true\n  }, \" *\"));\n});\nInputLabel.classes = classes;\nInputLabel.displayName = \"@mantine/core/InputLabel\";\nexport { InputLabel };","map":null,"metadata":{},"sourceType":"module"}