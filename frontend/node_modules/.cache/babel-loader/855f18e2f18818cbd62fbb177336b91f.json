{"ast":null,"code":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { polymorphicFactory } from '../../core/factory/polymorphic-factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { AvatarGroup } from './AvatarGroup/AvatarGroup.mjs';\nimport { useAvatarGroupContext } from './AvatarGroup/AvatarGroup.context.mjs';\nimport { AvatarPlaceholderIcon } from './AvatarPlaceholderIcon.mjs';\nimport classes from './Avatar.module.css.mjs';\nconst defaultProps = {};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    radius,\n    variant,\n    gradient,\n    color,\n    autoContrast\n  } = _ref;\n  const colors = theme.variantColorResolver({\n    color: color || \"gray\",\n    theme,\n    gradient,\n    variant: variant || \"light\",\n    autoContrast\n  });\n  return {\n    root: {\n      \"--avatar-size\": getSize(size, \"avatar-size\"),\n      \"--avatar-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--avatar-bg\": color || variant ? colors.background : void 0,\n      \"--avatar-color\": color || variant ? colors.color : void 0,\n      \"--avatar-bd\": color || variant ? colors.border : void 0\n    }\n  };\n});\nconst Avatar = polymorphicFactory((_props, ref) => {\n  const props = useProps(\"Avatar\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    src,\n    alt,\n    radius,\n    color,\n    gradient,\n    imageProps,\n    children,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const ctx = useAvatarGroupContext();\n  const [error, setError] = useState(!src);\n  const getStyles = useStyles({\n    name: \"Avatar\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  useEffect(() => setError(!src), [src]);\n  return /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\"),\n    mod: [{\n      \"within-group\": ctx.withinGroup\n    }, mod],\n    ref,\n    ...others\n  }, error ? /* @__PURE__ */React.createElement(\"span\", {\n    ...getStyles(\"placeholder\"),\n    title: alt\n  }, children || /* @__PURE__ */React.createElement(AvatarPlaceholderIcon, null)) : /* @__PURE__ */React.createElement(\"img\", {\n    ...imageProps,\n    ...getStyles(\"image\"),\n    src,\n    alt,\n    onError: event => {\n      var _imageProps$onError;\n      setError(true);\n      imageProps === null || imageProps === void 0 ? void 0 : (_imageProps$onError = imageProps.onError) === null || _imageProps$onError === void 0 ? void 0 : _imageProps$onError.call(imageProps, event);\n    }\n  }));\n});\nAvatar.classes = classes;\nAvatar.displayName = \"@mantine/core/Avatar\";\nAvatar.Group = AvatarGroup;\nexport { Avatar };","map":null,"metadata":{},"sourceType":"module"}