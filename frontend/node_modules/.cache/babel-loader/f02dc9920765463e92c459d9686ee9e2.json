{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport { useMergedRef, useDebounceCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { useScrollbarContext } from '../ScrollAreaScrollbar/Scrollbar.context.mjs';\nimport { composeEventHandlers } from '../utils/compose-event-handlers.mjs';\nimport { addUnlinkedScrollListener } from '../utils/add-unlinked-scroll-listener.mjs';\nconst Thumb = forwardRef((props, forwardedRef) => {\n  const {\n    style,\n    ...others\n  } = props;\n  const scrollAreaContext = useScrollAreaContext();\n  const scrollbarContext = useScrollbarContext();\n  const {\n    onThumbPositionChange\n  } = scrollbarContext;\n  const composedRef = useMergedRef(forwardedRef, node => scrollbarContext.onThumbChange(node));\n  const removeUnlinkedScrollListenerRef = useRef();\n  const debounceScrollEnd = useDebounceCallback(() => {\n    if (removeUnlinkedScrollListenerRef.current) {\n      removeUnlinkedScrollListenerRef.current();\n      removeUnlinkedScrollListenerRef.current = void 0;\n    }\n  }, 100);\n  useEffect(() => {\n    const {\n      viewport\n    } = scrollAreaContext;\n    if (viewport) {\n      const handleScroll = () => {\n        debounceScrollEnd();\n        if (!removeUnlinkedScrollListenerRef.current) {\n          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n          removeUnlinkedScrollListenerRef.current = listener;\n          onThumbPositionChange();\n        }\n      };\n      onThumbPositionChange();\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n    return void 0;\n  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n  return /* @__PURE__ */React.createElement(\"div\", {\n    \"data-state\": scrollbarContext.hasThumb ? \"visible\" : \"hidden\",\n    ...others,\n    ref: composedRef,\n    style: {\n      width: \"var(--sa-thumb-width)\",\n      height: \"var(--sa-thumb-height)\",\n      ...style\n    },\n    onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, event => {\n      const thumb = event.target;\n      const thumbRect = thumb.getBoundingClientRect();\n      const x = event.clientX - thumbRect.left;\n      const y = event.clientY - thumbRect.top;\n      scrollbarContext.onThumbPointerDown({\n        x,\n        y\n      });\n    }),\n    onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)\n  });\n});\nconst ScrollAreaThumb = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...thumbProps\n  } = props;\n  const scrollbarContext = useScrollbarContext();\n  if (forceMount || scrollbarContext.hasThumb) {\n    return /* @__PURE__ */React.createElement(Thumb, {\n      ref: forwardedRef,\n      ...thumbProps\n    });\n  }\n  return null;\n});\nexport { ScrollAreaThumb, Thumb };","map":null,"metadata":{},"sourceType":"module"}