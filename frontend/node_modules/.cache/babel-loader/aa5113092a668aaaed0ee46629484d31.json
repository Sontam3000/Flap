{"ast":null,"code":"'use client';\n\nimport { keys } from '../../../../core/utils/keys/keys.mjs';\nimport { em } from '../../../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getSortedBreakpoints } from '../../../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../../core/MantineProvider/default-theme.mjs';\nimport '../../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../../core/Box/Box.mjs';\nimport '../../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { assignAsideVariables } from '../assign-aside-variables/assign-aside-variables.mjs';\nimport { assignFooterVariables } from '../assign-footer-variables/assign-footer-variables.mjs';\nimport { assignHeaderVariables } from '../assign-header-variables/assign-header-variables.mjs';\nimport { assignNavbarVariables } from '../assign-navbar-variables/assign-navbar-variables.mjs';\nimport { assignPaddingVariables } from '../assign-padding-variables/assign-padding-variables.mjs';\nfunction getVariables(_ref) {\n  let {\n    navbar,\n    header,\n    footer,\n    aside,\n    padding,\n    theme\n  } = _ref;\n  const minMediaStyles = {};\n  const maxMediaStyles = {};\n  const baseStyles = {};\n  assignNavbarVariables({\n    baseStyles,\n    minMediaStyles,\n    maxMediaStyles,\n    navbar,\n    theme\n  });\n  assignAsideVariables({\n    baseStyles,\n    minMediaStyles,\n    maxMediaStyles,\n    aside,\n    theme\n  });\n  assignHeaderVariables({\n    baseStyles,\n    minMediaStyles,\n    header\n  });\n  assignFooterVariables({\n    baseStyles,\n    minMediaStyles,\n    footer\n  });\n  assignPaddingVariables({\n    baseStyles,\n    minMediaStyles,\n    padding\n  });\n  const minMedia = getSortedBreakpoints(keys(minMediaStyles), theme).map(breakpoint => ({\n    query: \"(min-width: \".concat(em(breakpoint.px), \")\"),\n    styles: minMediaStyles[breakpoint.value]\n  }));\n  const maxMedia = getSortedBreakpoints(keys(maxMediaStyles), theme).map(breakpoint => ({\n    query: \"(max-width: \".concat(em(breakpoint.px), \")\"),\n    styles: maxMediaStyles[breakpoint.value]\n  }));\n  const media = [...minMedia, ...maxMedia];\n  return {\n    baseStyles,\n    media\n  };\n}\nexport { getVariables };","map":null,"metadata":{},"sourceType":"module"}