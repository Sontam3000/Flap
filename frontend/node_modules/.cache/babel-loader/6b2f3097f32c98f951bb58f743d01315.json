{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useEffect } from 'react';\nimport { useMergedRef, useCallbackRef, useDebounceCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { useResizeObserver } from '../use-resize-observer.mjs';\nimport { composeEventHandlers } from '../utils/compose-event-handlers.mjs';\nimport { ScrollbarProvider } from './Scrollbar.context.mjs';\nconst Scrollbar = forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const [scrollbar, setScrollbar] = React.useState(null);\n  const composeRefs = useMergedRef(forwardedRef, node => setScrollbar(node));\n  const rectRef = React.useRef(null);\n  const prevWebkitUserSelectRef = React.useRef(\"\");\n  const {\n    viewport\n  } = context;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n  const handleDragScroll = event => {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x,\n        y\n      });\n    }\n  };\n  useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar === null || scrollbar === void 0 ? void 0 : scrollbar.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */React.createElement(ScrollbarProvider, {\n    value: {\n      scrollbar,\n      hasThumb,\n      onThumbChange: useCallbackRef(onThumbChange),\n      onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n      onThumbPositionChange: handleThumbPositionChange,\n      onThumbPointerDown: useCallbackRef(onThumbPointerDown)\n    }\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    ...scrollbarProps,\n    ref: composeRefs,\n    style: {\n      position: \"absolute\",\n      ...scrollbarProps.style\n    },\n    onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n      const mainPointer = 0;\n      if (event.button === mainPointer) {\n        const element = event.target;\n        element.setPointerCapture(event.pointerId);\n        rectRef.current = scrollbar.getBoundingClientRect();\n        prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n        document.body.style.webkitUserSelect = \"none\";\n        handleDragScroll(event);\n      }\n    }),\n    onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),\n    onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n      const element = event.target;\n      if (element.hasPointerCapture(event.pointerId)) {\n        element.releasePointerCapture(event.pointerId);\n      }\n      document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n      rectRef.current = null;\n    })\n  }));\n});\nexport { Scrollbar };","map":null,"metadata":{},"sourceType":"module"}