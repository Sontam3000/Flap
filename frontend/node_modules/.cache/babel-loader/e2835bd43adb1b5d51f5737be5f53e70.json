{"ast":null,"code":"'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useUncontrolled, useMove } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { getSize, getRadius } from '../../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { SliderProvider } from '../Slider.context.mjs';\nimport { SliderRoot } from '../SliderRoot/SliderRoot.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport { Track } from '../Track/Track.mjs';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value.mjs';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position.mjs';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value.mjs';\nimport { getPosition } from '../utils/get-position/get-position.mjs';\nimport { getPrecision } from '../utils/get-precision/get-precision.mjs';\nimport classes from '../Slider.module.css.mjs';\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    color,\n    thumbSize,\n    radius\n  } = _ref;\n  return {\n    root: {\n      \"--slider-size\": getSize(size, \"slider-size\"),\n      \"--slider-color\": color ? getThemeColor(color, theme) : void 0,\n      \"--slider-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--slider-thumb-size\": thumbSize !== void 0 ? rem(thumbSize) : \"calc(var(--slider-size) * 2)\"\n    }\n  };\n});\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: f => f,\n  labelTransitionProps: {\n    transition: \"fade\",\n    duration: 0\n  },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  scale: v => v\n};\nconst RangeSlider = factory((_props, ref) => {\n  const props = useProps(\"RangeSlider\", defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    minRange,\n    maxRange,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbFromLabel,\n    thumbToLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Slider\",\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    vars,\n    varsResolver,\n    unstyled\n  });\n  const {\n    dir\n  } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef([]);\n  const thumbIndex = useRef(void 0);\n  const positions = [getPosition({\n    value: _value[0],\n    min,\n    max\n  }), getPosition({\n    value: _value[1],\n    min,\n    max\n  })];\n  const precision = _precision !== null && _precision !== void 0 ? _precision : getPrecision(step);\n  const _setValue = val => {\n    setValue(val);\n    valueRef.current = val;\n  };\n  useEffect(() => {\n    if (Array.isArray(value)) {\n      valueRef.current = value;\n    }\n  }, Array.isArray(value) ? [value[0], value[1]] : [null, null]);\n  const setRangedValue = (val, index, triggerChangeEnd) => {\n    const clone = [...valueRef.current];\n    clone[index] = val;\n    if (index === 0) {\n      if (val > clone[1] - (minRange - 1e-9)) {\n        clone[1] = Math.min(val + minRange, max);\n      }\n      if (val > (max - (minRange - 1e-9) || min)) {\n        clone[index] = valueRef.current[index];\n      }\n      if (clone[1] - val > maxRange) {\n        clone[1] = val + maxRange;\n      }\n    }\n    if (index === 1) {\n      if (val < clone[0] + minRange) {\n        clone[0] = Math.max(val - minRange, min);\n      }\n      if (val < clone[0] + minRange) {\n        clone[index] = valueRef.current[index];\n      }\n      if (val - clone[0] > maxRange) {\n        clone[0] = val - maxRange;\n      }\n    }\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n    _setValue(clone);\n    if (triggerChangeEnd) {\n      onChangeEnd === null || onChangeEnd === void 0 ? void 0 : onChangeEnd(valueRef.current);\n    }\n  };\n  const handleChange = val => {\n    if (!disabled) {\n      const nextValue = getChangeValue({\n        value: val,\n        min,\n        max,\n        step,\n        precision\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n  const {\n    ref: container,\n    active\n  } = useMove(_ref2 => {\n    let {\n      x\n    } = _ref2;\n    return handleChange(x);\n  }, {\n    onScrubEnd: () => onChangeEnd === null || onChangeEnd === void 0 ? void 0 : onChangeEnd(valueRef.current)\n  }, dir);\n  function handleThumbMouseDown(index) {\n    thumbIndex.current = index;\n  }\n  const handleTrackMouseDownCapture = event => {\n    container.current.focus();\n    const rect = container.current.getBoundingClientRect();\n    const changePosition = getClientPosition(event.nativeEvent);\n    const changeValue = getChangeValue({\n      value: changePosition - rect.left,\n      max,\n      min,\n      step,\n      containerWidth: rect.width\n    });\n    const nearestHandle = Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n    const _nearestHandle = dir === \"ltr\" ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n    thumbIndex.current = _nearestHandle;\n  };\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n    return focused;\n  };\n  const handleTrackKeydownCapture = event => {\n    if (!disabled) {\n      switch (event.key) {\n        case \"ArrowUp\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            setRangedValue(getFloatingValue(Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max), precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            setRangedValue(getFloatingValue(Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] - step : valueRef.current[focusedIndex] + step, min), max), precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowDown\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            setRangedValue(getFloatingValue(Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max), precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowLeft\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            setRangedValue(getFloatingValue(Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] + step : valueRef.current[focusedIndex] - step, min), max), precision), focusedIndex, true);\n            break;\n          }\n      }\n    }\n  };\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1)\n  };\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n  return /* @__PURE__ */React.createElement(SliderProvider, {\n    value: {\n      getStyles\n    }\n  }, /* @__PURE__ */React.createElement(SliderRoot, {\n    ...others,\n    size,\n    ref,\n    disabled\n  }, /* @__PURE__ */React.createElement(Track, {\n    offset: positions[0],\n    marksOffset: _value[0],\n    filled: positions[1] - positions[0],\n    marks,\n    inverted,\n    min,\n    max,\n    value: _value[1],\n    disabled,\n    containerProps: {\n      ref: container,\n      onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,\n      onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0,\n      onTouchStartCapture: handleTrackMouseDownCapture,\n      onTouchEndCapture: () => {\n        thumbIndex.current = -1;\n      },\n      onMouseDownCapture: handleTrackMouseDownCapture,\n      onMouseUpCapture: () => {\n        thumbIndex.current = -1;\n      },\n      onKeyDownCapture: handleTrackKeydownCapture\n    }\n  }, /* @__PURE__ */React.createElement(Thumb, {\n    ...sharedThumbProps,\n    value: scale(_value[0]),\n    position: positions[0],\n    dragging: active,\n    label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[0]), precision)) : label,\n    ref: node => {\n      thumbs.current[0] = node;\n    },\n    thumbLabel: thumbFromLabel,\n    onMouseDown: () => handleThumbMouseDown(0),\n    onFocus: () => setFocused(0),\n    showLabelOnHover,\n    isHovered: hovered,\n    disabled\n  }, hasArrayThumbChildren ? thumbChildren[0] : thumbChildren), /* @__PURE__ */React.createElement(Thumb, {\n    ...sharedThumbProps,\n    thumbLabel: thumbToLabel,\n    value: scale(_value[1]),\n    position: positions[1],\n    dragging: active,\n    label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[1]), precision)) : label,\n    ref: node => {\n      thumbs.current[1] = node;\n    },\n    onMouseDown: () => handleThumbMouseDown(1),\n    onFocus: () => setFocused(1),\n    showLabelOnHover,\n    isHovered: hovered,\n    disabled\n  }, hasArrayThumbChildren ? thumbChildren[1] : thumbChildren)), /* @__PURE__ */React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"\".concat(name, \"_from\"),\n    value: _value[0],\n    ...hiddenInputProps\n  }), /* @__PURE__ */React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"\".concat(name, \"_to\"),\n    value: _value[1],\n    ...hiddenInputProps\n  })));\n});\nRangeSlider.classes = classes;\nRangeSlider.displayName = \"@mantine/core/RangeSlider\";\nexport { RangeSlider };","map":null,"metadata":{},"sourceType":"module"}