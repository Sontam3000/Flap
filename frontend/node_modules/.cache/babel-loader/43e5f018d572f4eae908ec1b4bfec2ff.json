{"ast":null,"code":"'use client';\n\nfunction getCurves(_ref) {\n  let {\n    size,\n    thickness,\n    sections,\n    renderRoundedLineCaps,\n    rootColor\n  } = _ref;\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n  const curvesInOrder = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n  curves.push({\n    sum,\n    offset,\n    data: {\n      color: rootColor\n    },\n    root: true\n  });\n  curvesInOrder.push({\n    ...curves[curves.length - 1],\n    lineRoundCaps: false\n  });\n  if (curves.length > 2) {\n    curvesInOrder.push({\n      ...curves[0],\n      lineRoundCaps: renderRoundedLineCaps\n    });\n    curvesInOrder.push({\n      ...curves[curves.length - 2],\n      lineRoundCaps: renderRoundedLineCaps\n    });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({\n        ...curves[i],\n        lineRoundCaps: false\n      });\n    }\n  } else {\n    curvesInOrder.push({\n      ...curves[0],\n      lineRoundCaps: renderRoundedLineCaps\n    });\n  }\n  return curvesInOrder;\n}\nexport { getCurves };","map":null,"metadata":{},"sourceType":"module"}