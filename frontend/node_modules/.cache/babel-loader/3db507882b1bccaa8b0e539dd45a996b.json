{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { getSafeId } from '../../core/utils/get-safe-id/get-safe-id.mjs';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { TabsProvider } from './Tabs.context.mjs';\nimport { TabsList } from './TabsList/TabsList.mjs';\nimport { TabsPanel } from './TabsPanel/TabsPanel.mjs';\nimport { TabsTab } from './TabsTab/TabsTab.mjs';\nimport classes from './Tabs.module.css.mjs';\nconst VALUE_ERROR = \"Tabs.Tab or Tabs.Panel component was rendered with invalid value or without value\";\nconst defaultProps = {\n  keepMounted: true,\n  orientation: \"horizontal\",\n  loop: true,\n  activateTabWithKeyboard: true,\n  allowTabDeactivation: false,\n  unstyled: false,\n  inverted: false,\n  variant: \"default\",\n  placement: \"left\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    radius,\n    color,\n    autoContrast\n  } = _ref;\n  return {\n    root: {\n      \"--tabs-radius\": getRadius(radius),\n      \"--tabs-color\": getThemeColor(color, theme),\n      \"--tabs-text-color\": getAutoContrastValue(autoContrast, theme) ? getContrastColor({\n        color,\n        theme\n      }) : void 0\n    }\n  };\n});\nconst Tabs = factory((_props, ref) => {\n  const props = useProps(\"Tabs\", defaultProps, _props);\n  const {\n    defaultValue,\n    value,\n    onChange,\n    orientation,\n    children,\n    loop,\n    id,\n    activateTabWithKeyboard,\n    allowTabDeactivation,\n    variant,\n    color,\n    radius,\n    inverted,\n    placement,\n    keepMounted,\n    classNames,\n    styles,\n    unstyled,\n    className,\n    style,\n    vars,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const uid = useId(id);\n  const [currentTab, setCurrentTab] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange\n  });\n  const getStyles = useStyles({\n    name: \"Tabs\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(TabsProvider, {\n    value: {\n      placement,\n      value: currentTab,\n      orientation,\n      id: uid,\n      loop,\n      activateTabWithKeyboard,\n      getTabId: getSafeId(\"\".concat(uid, \"-tab\"), VALUE_ERROR),\n      getPanelId: getSafeId(\"\".concat(uid, \"-panel\"), VALUE_ERROR),\n      onChange: setCurrentTab,\n      allowTabDeactivation,\n      variant,\n      color,\n      radius,\n      inverted,\n      keepMounted,\n      unstyled,\n      getStyles\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ref,\n    id: uid,\n    variant,\n    mod: [{\n      orientation,\n      inverted: orientation === \"horizontal\" && inverted,\n      placement: orientation === \"vertical\" && placement\n    }, mod],\n    ...getStyles(\"root\"),\n    ...others\n  }, children));\n});\nTabs.classes = classes;\nTabs.displayName = \"@mantine/core/Tabs\";\nTabs.Tab = TabsTab;\nTabs.Panel = TabsPanel;\nTabs.List = TabsList;\nexport { Tabs };","map":null,"metadata":{},"sourceType":"module"}