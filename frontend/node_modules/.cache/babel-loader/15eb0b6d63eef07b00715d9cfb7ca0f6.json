{"ast":null,"code":"'use client';\n\nimport { keys } from '../../../utils/keys/keys.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport { resolvers } from '../resolvers/index.mjs';\nimport { sortMediaQueries } from './sort-media-queries.mjs';\nfunction hasResponsiveStyles(styleProp) {\n  if (typeof styleProp !== \"object\" || styleProp === null) {\n    return false;\n  }\n  const breakpoints = Object.keys(styleProp);\n  if (breakpoints.length === 1 && breakpoints[0] === \"base\") {\n    return false;\n  }\n  return true;\n}\nfunction getBaseValue(value) {\n  if (typeof value === \"object\" && value !== null) {\n    if (\"base\" in value) {\n      return value.base;\n    }\n    return void 0;\n  }\n  return value;\n}\nfunction getBreakpointKeys(value) {\n  if (typeof value === \"object\" && value !== null) {\n    return keys(value).filter(key => key !== \"base\");\n  }\n  return [];\n}\nfunction getBreakpointValue(value, breakpoint) {\n  if (typeof value === \"object\" && value !== null && breakpoint in value) {\n    return value[breakpoint];\n  }\n  return value;\n}\nfunction parseStyleProps(_ref) {\n  let {\n    styleProps,\n    data,\n    theme\n  } = _ref;\n  return sortMediaQueries(keys(styleProps).reduce((acc, styleProp) => {\n    if (styleProp === \"hiddenFrom\" || styleProp === \"visibleFrom\") {\n      return acc;\n    }\n    const propertyData = data[styleProp];\n    const properties = Array.isArray(propertyData.property) ? propertyData.property : [propertyData.property];\n    const baseValue = getBaseValue(styleProps[styleProp]);\n    if (!hasResponsiveStyles(styleProps[styleProp])) {\n      properties.forEach(property => {\n        acc.inlineStyles[property] = resolvers[propertyData.type](baseValue, theme);\n      });\n      return acc;\n    }\n    acc.hasResponsiveStyles = true;\n    const breakpoints = getBreakpointKeys(styleProps[styleProp]);\n    properties.forEach(property => {\n      if (baseValue) {\n        acc.styles[property] = resolvers[propertyData.type](baseValue, theme);\n      }\n      breakpoints.forEach(breakpoint => {\n        const bp = \"(min-width: \".concat(theme.breakpoints[breakpoint], \")\");\n        acc.media[bp] = {\n          ...acc.media[bp],\n          [property]: resolvers[propertyData.type](getBreakpointValue(styleProps[styleProp], breakpoint), theme)\n        };\n      });\n    });\n    return acc;\n  }, {\n    hasResponsiveStyles: false,\n    styles: {},\n    inlineStyles: {},\n    media: {}\n  }));\n}\nexport { parseStyleProps };","map":null,"metadata":{},"sourceType":"module"}