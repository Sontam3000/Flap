{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport cx from 'clsx';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ActionIcon } from '../ActionIcon/ActionIcon.mjs';\nimport '../ActionIcon/ActionIconGroup/ActionIconGroup.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport '../Input/InputWrapper/InputWrapper.mjs';\nimport '../Input/InputDescription/InputDescription.mjs';\nimport '../Input/InputError/InputError.mjs';\nimport '../Input/InputLabel/InputLabel.mjs';\nimport '../Input/InputPlaceholder/InputPlaceholder.mjs';\nimport '../Input/InputWrapper.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { PasswordToggleIcon } from './PasswordToggleIcon.mjs';\nimport classes from './PasswordInput.module.css.mjs';\nconst defaultProps = {\n  visibilityToggleIcon: PasswordToggleIcon\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    size\n  } = _ref;\n  return {\n    root: {\n      \"--psi-icon-size\": getSize(size, \"psi-icon-size\"),\n      \"--psi-button-size\": getSize(size, \"psi-button-size\")\n    }\n  };\n});\nconst PasswordInput = factory((_props, ref) => {\n  const props = useProps(\"PasswordInput\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    required,\n    error,\n    leftSection,\n    disabled,\n    id,\n    variant,\n    inputContainer,\n    description,\n    label,\n    size,\n    errorProps,\n    descriptionProps,\n    labelProps,\n    withAsterisk,\n    inputWrapperOrder,\n    wrapperProps,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    leftSectionWidth,\n    visible,\n    defaultVisible,\n    onVisibilityChange,\n    visibilityToggleIcon,\n    visibilityToggleButtonProps,\n    rightSectionProps,\n    leftSectionProps,\n    leftSectionPointerEvents,\n    mod,\n    ...others\n  } = props;\n  const uuid = useId(id);\n  const [_visible, setVisibility] = useUncontrolled({\n    value: visible,\n    defaultValue: defaultVisible,\n    finalValue: false,\n    onChange: onVisibilityChange\n  });\n  const toggleVisibility = () => setVisibility(!_visible);\n  const getStyles = useStyles({\n    name: \"PasswordInput\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const VisibilityToggleIcon = visibilityToggleIcon;\n  const visibilityToggleButton = /* @__PURE__ */React.createElement(ActionIcon, {\n    ...getStyles(\"visibilityToggle\"),\n    disabled,\n    radius,\n    \"aria-hidden\": !visibilityToggleButtonProps,\n    tabIndex: -1,\n    ...visibilityToggleButtonProps,\n    variant: \"subtle\",\n    color: \"gray\",\n    unstyled,\n    onMouseDown: event => {\n      var _visibilityToggleButt;\n      event.preventDefault();\n      visibilityToggleButtonProps === null || visibilityToggleButtonProps === void 0 ? void 0 : (_visibilityToggleButt = visibilityToggleButtonProps.onMouseDown) === null || _visibilityToggleButt === void 0 ? void 0 : _visibilityToggleButt.call(visibilityToggleButtonProps, event);\n      toggleVisibility();\n    },\n    onKeyDown: event => {\n      var _visibilityToggleButt2;\n      visibilityToggleButtonProps === null || visibilityToggleButtonProps === void 0 ? void 0 : (_visibilityToggleButt2 = visibilityToggleButtonProps.onKeyDown) === null || _visibilityToggleButt2 === void 0 ? void 0 : _visibilityToggleButt2.call(visibilityToggleButtonProps, event);\n      if (event.key === \" \") {\n        event.preventDefault();\n        toggleVisibility();\n      }\n    }\n  }, /* @__PURE__ */React.createElement(VisibilityToggleIcon, {\n    reveal: _visible\n  }));\n  return /* @__PURE__ */React.createElement(Input.Wrapper, {\n    required,\n    id: uuid,\n    label,\n    error,\n    description,\n    size,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    __staticSelector: \"PasswordInput\",\n    errorProps,\n    descriptionProps,\n    unstyled,\n    withAsterisk,\n    inputWrapperOrder,\n    inputContainer,\n    variant,\n    labelProps: {\n      ...labelProps,\n      htmlFor: uuid\n    },\n    mod,\n    ...getStyles(\"root\"),\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(Input, {\n    component: \"div\",\n    error,\n    leftSection,\n    size,\n    classNames: {\n      ...resolvedClassNames,\n      input: cx(classes.input, resolvedClassNames.input)\n    },\n    styles: resolvedStyles,\n    radius,\n    disabled,\n    __staticSelector: \"PasswordInput\",\n    rightSectionWidth,\n    rightSection: rightSection !== null && rightSection !== void 0 ? rightSection : visibilityToggleButton,\n    variant,\n    unstyled,\n    leftSectionWidth,\n    rightSectionPointerEvents: rightSectionPointerEvents || \"all\",\n    rightSectionProps,\n    leftSectionProps,\n    leftSectionPointerEvents,\n    withAria: false\n  }, /* @__PURE__ */React.createElement(\"input\", {\n    required,\n    \"data-invalid\": !!error || void 0,\n    \"data-with-left-section\": !!leftSection || void 0,\n    ...getStyles(\"innerInput\"),\n    disabled,\n    id: uuid,\n    ref,\n    ...rest,\n    autoComplete: rest.autoComplete || \"off\",\n    type: _visible ? \"text\" : \"password\"\n  })));\n});\nPasswordInput.classes = {\n  ...InputBase.classes,\n  ...classes\n};\nPasswordInput.displayName = \"@mantine/core/PasswordInput\";\nexport { PasswordInput };","map":null,"metadata":{},"sourceType":"module"}