{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Pill } from '../Pill/Pill.mjs';\nimport '../Pill/PillGroup/PillGroup.mjs';\nimport { PillsInput } from '../PillsInput/PillsInput.mjs';\nimport '../PillsInput/PillsInputField/PillsInputField.mjs';\nimport { filterPickedTags } from './filter-picked-tags.mjs';\nimport { getSplittedTags } from './get-splitted-tags.mjs';\nconst defaultProps = {\n  maxTags: Infinity,\n  allowDuplicates: false,\n  splitChars: [\",\"],\n  hiddenInputValuesDivider: \",\"\n};\nconst TagsInput = factory((_props, ref) => {\n  const props = useProps(\"TagsInput\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    maxTags,\n    allowDuplicates,\n    onDuplicate,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    splitChars,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    required,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    hiddenInputValuesDivider,\n    mod,\n    ...others\n  } = props;\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose === null || onDropdownClose === void 0 ? void 0 : onDropdownClose();\n      combobox.resetSelectedOption();\n    }\n  });\n  const {\n    styleProps,\n    rest: {\n      type,\n      ...rest\n    }\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange\n  });\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: \"\",\n    onChange: onSearchChange\n  });\n  const getStyles = useStyles({\n    name: \"TagsInput\",\n    classes: {},\n    props,\n    classNames,\n    styles,\n    unstyled\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  const handleInputKeydown = event => {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n    const inputValue = _searchValue.trim();\n    const {\n      length\n    } = inputValue;\n    if (splitChars.includes(event.key) && length > 0) {\n      setValue(getSplittedTags({\n        splitChars,\n        allowDuplicates,\n        maxTags,\n        value: _searchValue,\n        currentTags: _value\n      }));\n      setSearchValue(\"\");\n      event.preventDefault();\n    }\n    if (event.key === \"Enter\" && length > 0 && !event.nativeEvent.isComposing) {\n      event.preventDefault();\n      const isDuplicate = _value.some(tag => tag.toLowerCase() === inputValue.toLowerCase());\n      if (isDuplicate) {\n        onDuplicate === null || onDuplicate === void 0 ? void 0 : onDuplicate(inputValue);\n      }\n      if ((!isDuplicate || isDuplicate && allowDuplicates) && _value.length < maxTags) {\n        onOptionSubmit === null || onOptionSubmit === void 0 ? void 0 : onOptionSubmit(inputValue);\n        setSearchValue(\"\");\n        if (inputValue.length > 0) {\n          setValue([..._value, inputValue]);\n        }\n      }\n    }\n    if (event.key === \"Backspace\" && length === 0 && _value.length > 0) {\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n  const handlePaste = event => {\n    onPaste === null || onPaste === void 0 ? void 0 : onPaste(event);\n    event.preventDefault();\n    if (event.clipboardData) {\n      const pastedText = event.clipboardData.getData(\"text/plain\");\n      setValue(getSplittedTags({\n        splitChars,\n        allowDuplicates,\n        maxTags,\n        value: pastedText,\n        currentTags: _value\n      }));\n      setSearchValue(\"\");\n    }\n  };\n  const values = _value.map((item, index) => /* @__PURE__ */React.createElement(Pill, {\n    key: \"\".concat(item, \"-\").concat(index),\n    withRemoveButton: !readOnly,\n    onRemove: () => setValue(_value.filter(i => item !== i)),\n    unstyled,\n    ...getStyles(\"pill\")\n  }, item));\n  const clearButton = clearable && _value.length > 0 && !disabled && !readOnly && /* @__PURE__ */React.createElement(Combobox.ClearButton, {\n    size,\n    ...clearButtonProps,\n    onClear: () => {\n      setValue([]);\n      setSearchValue(\"\");\n    }\n  });\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(Combobox, {\n    store: combobox,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    size,\n    readOnly,\n    __staticSelector: \"TagsInput\",\n    onOptionSubmit: val => {\n      onOptionSubmit === null || onOptionSubmit === void 0 ? void 0 : onOptionSubmit(val);\n      setSearchValue(\"\");\n      _value.length < maxTags && setValue([..._value, optionsLockup[val].label]);\n    },\n    ...comboboxProps\n  }, /* @__PURE__ */React.createElement(Combobox.DropdownTarget, null, /* @__PURE__ */React.createElement(PillsInput, {\n    ...styleProps,\n    __staticSelector: \"TagsInput\",\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    size,\n    className,\n    style,\n    variant,\n    disabled,\n    radius,\n    rightSection: rightSection || clearButton,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    required,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    multiline: true,\n    withErrorStyles,\n    __stylesApiProps: {\n      ...props,\n      multiline: true\n    },\n    id: _id,\n    mod\n  }, /* @__PURE__ */React.createElement(Pill.Group, {\n    disabled,\n    unstyled,\n    ...getStyles(\"pillsList\")\n  }, values, /* @__PURE__ */React.createElement(Combobox.EventsTarget, null, /* @__PURE__ */React.createElement(PillsInput.Field, {\n    ...rest,\n    ref,\n    ...getStyles(\"inputField\"),\n    unstyled,\n    onKeyDown: handleInputKeydown,\n    onFocus: event => {\n      onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n      combobox.openDropdown();\n    },\n    onBlur: event => {\n      onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n      combobox.closeDropdown();\n    },\n    onPaste: handlePaste,\n    value: _searchValue,\n    onChange: event => setSearchValue(event.currentTarget.value),\n    required: required && _value.length === 0,\n    disabled,\n    readOnly,\n    id: _id\n  }))))), /* @__PURE__ */React.createElement(OptionsDropdown, {\n    data: filterPickedTags({\n      data: parsedData,\n      value: _value\n    }),\n    hidden: readOnly || disabled,\n    filter,\n    search: _searchValue,\n    limit,\n    hiddenWhenEmpty: true,\n    withScrollArea,\n    maxDropdownHeight,\n    unstyled,\n    labelId: \"\".concat(_id, \"-label\")\n  })), /* @__PURE__ */React.createElement(\"input\", {\n    type: \"hidden\",\n    name,\n    form,\n    value: _value.join(hiddenInputValuesDivider),\n    disabled,\n    ...hiddenInputProps\n  }));\n});\nTagsInput.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nTagsInput.displayName = \"@mantine/core/TagsInput\";\nexport { TagsInput };","map":null,"metadata":{},"sourceType":"module"}