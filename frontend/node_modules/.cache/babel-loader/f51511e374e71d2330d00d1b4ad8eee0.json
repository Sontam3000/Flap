{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { getSize, getFontSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { polymorphicFactory } from '../../core/factory/polymorphic-factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Loader } from '../Loader/Loader.mjs';\nimport { UnstyledButton } from '../UnstyledButton/UnstyledButton.mjs';\nimport { ButtonGroup } from './ButtonGroup/ButtonGroup.mjs';\nimport classes from './Button.module.css.mjs';\nconst defaultProps = {};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    radius,\n    color,\n    gradient,\n    variant,\n    size,\n    justify,\n    autoContrast\n  } = _ref;\n  const colors = theme.variantColorResolver({\n    color: color || theme.primaryColor,\n    theme,\n    gradient,\n    variant: variant || \"filled\",\n    autoContrast\n  });\n  return {\n    root: {\n      \"--button-justify\": justify,\n      \"--button-height\": getSize(size, \"button-height\"),\n      \"--button-padding-x\": getSize(size, \"button-padding-x\"),\n      \"--button-fz\": (size === null || size === void 0 ? void 0 : size.includes(\"compact\")) ? getFontSize(size.replace(\"compact-\", \"\")) : getFontSize(size),\n      \"--button-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--button-bg\": color || variant ? colors.background : void 0,\n      \"--button-hover\": color || variant ? colors.hover : void 0,\n      \"--button-color\": colors.color,\n      \"--button-bd\": color || variant ? colors.border : void 0,\n      \"--button-hover-color\": color || variant ? colors.hoverColor : void 0\n    }\n  };\n});\nconst Button = polymorphicFactory((_props, ref) => {\n  const props = useProps(\"Button\", defaultProps, _props);\n  const {\n    style,\n    vars,\n    className,\n    color,\n    disabled,\n    children,\n    leftSection,\n    rightSection,\n    fullWidth,\n    variant,\n    radius,\n    loading,\n    loaderProps,\n    gradient,\n    classNames,\n    styles,\n    unstyled,\n    \"data-disabled\": dataDisabled,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Button\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const hasLeftSection = !!leftSection;\n  const hasRightSection = !!rightSection;\n  return /* @__PURE__ */React.createElement(UnstyledButton, {\n    ref,\n    ...getStyles(\"root\", {\n      active: !disabled && !loading && !dataDisabled\n    }),\n    unstyled,\n    variant,\n    disabled: disabled || loading,\n    mod: [{\n      disabled: disabled || dataDisabled,\n      loading,\n      block: fullWidth,\n      \"with-left-section\": hasLeftSection,\n      \"with-right-section\": hasRightSection\n    }, mod],\n    ...others\n  }, /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    ...getStyles(\"loader\"),\n    \"aria-hidden\": true\n  }, /* @__PURE__ */React.createElement(Loader, {\n    color: \"var(--button-color)\",\n    size: \"calc(var(--button-height) / 1.8)\",\n    ...loaderProps\n  })), /* @__PURE__ */React.createElement(\"span\", {\n    ...getStyles(\"inner\")\n  }, leftSection && /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    ...getStyles(\"section\"),\n    mod: {\n      position: \"left\"\n    }\n  }, leftSection), /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    mod: {\n      loading\n    },\n    ...getStyles(\"label\")\n  }, children), rightSection && /* @__PURE__ */React.createElement(Box, {\n    component: \"span\",\n    ...getStyles(\"section\"),\n    mod: {\n      position: \"right\"\n    }\n  }, rightSection)));\n});\nButton.classes = classes;\nButton.displayName = \"@mantine/core/Button\";\nButton.Group = ButtonGroup;\nexport { Button };","map":null,"metadata":{},"sourceType":"module"}