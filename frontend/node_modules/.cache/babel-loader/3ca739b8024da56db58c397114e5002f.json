{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport { useDebounceCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { composeEventHandlers } from '../utils/compose-event-handlers.mjs';\nimport { ScrollAreaScrollbarVisible } from './ScrollAreaScrollbarVisible.mjs';\nconst ScrollAreaScrollbarScroll = forwardRef((props, red) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const isHorizontal = props.orientation === \"horizontal\";\n  const [state, setState] = useState(\"hidden\");\n  const debounceScrollEnd = useDebounceCallback(() => setState(\"idle\"), 100);\n  useEffect(() => {\n    if (state === \"idle\") {\n      const hideTimer = window.setTimeout(() => setState(\"hidden\"), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n    return void 0;\n  }, [state, context.scrollHideDelay]);\n  useEffect(() => {\n    const {\n      viewport\n    } = context;\n    const scrollDirection = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          setState(\"scrolling\");\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n    return void 0;\n  }, [context.viewport, isHorizontal, debounceScrollEnd]);\n  if (forceMount || state !== \"hidden\") {\n    return /* @__PURE__ */React.createElement(ScrollAreaScrollbarVisible, {\n      \"data-state\": state === \"hidden\" ? \"hidden\" : \"visible\",\n      ...scrollbarProps,\n      ref: red,\n      onPointerEnter: composeEventHandlers(props.onPointerEnter, () => setState(\"interacting\")),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, () => setState(\"idle\"))\n    });\n  }\n  return null;\n});\nexport { ScrollAreaScrollbarScroll };","map":null,"metadata":{},"sourceType":"module"}