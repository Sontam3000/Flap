{"ast":null,"code":"'use client';\n\nimport React, { useId } from 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useComboboxContext } from '../Combobox.context.mjs';\nimport classes from '../Combobox.module.css.mjs';\nconst defaultProps = {};\nconst ComboboxOption = factory((_props, ref) => {\n  const props = useProps(\"ComboboxOption\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    onClick,\n    id,\n    active,\n    onMouseDown,\n    onMouseOver,\n    disabled,\n    selected,\n    mod,\n    ...others\n  } = props;\n  const ctx = useComboboxContext();\n  const uuid = useId();\n  const _id = id || uuid;\n  return /* @__PURE__ */React.createElement(Box, {\n    ...ctx.getStyles(\"option\", {\n      className,\n      classNames,\n      styles,\n      style\n    }),\n    ...others,\n    ref,\n    id: _id,\n    mod: [\"combobox-option\", {\n      \"combobox-active\": active,\n      \"combobox-disabled\": disabled,\n      \"combobox-selected\": selected\n    }, mod],\n    role: \"option\",\n    onClick: event => {\n      if (!disabled) {\n        var _ctx$onOptionSubmit;\n        (_ctx$onOptionSubmit = ctx.onOptionSubmit) === null || _ctx$onOptionSubmit === void 0 ? void 0 : _ctx$onOptionSubmit.call(ctx, props.value, props);\n        onClick === null || onClick === void 0 ? void 0 : onClick(event);\n      } else {\n        event.preventDefault();\n      }\n    },\n    onMouseDown: event => {\n      event.preventDefault();\n      onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);\n    },\n    onMouseOver: event => {\n      if (ctx.resetSelectionOnOptionHover) {\n        ctx.store.resetSelectedOption();\n      }\n      onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver(event);\n    }\n  });\n});\nComboboxOption.classes = classes;\nComboboxOption.displayName = \"@mantine/core/ComboboxOption\";\nexport { ComboboxOption };","map":null,"metadata":{},"sourceType":"module"}