{"ast":null,"code":"'use client';\n\nimport React, { forwardRef } from 'react';\nimport cx from 'clsx';\nimport { createPolymorphicComponent } from '../factory/create-polymorphic-component.mjs';\nimport { InlineStyles } from '../InlineStyles/InlineStyles.mjs';\nimport { isNumberLike } from '../utils/is-number-like/is-number-like.mjs';\nimport '@mantine/hooks';\nimport '../MantineProvider/Mantine.context.mjs';\nimport '../MantineProvider/default-theme.mjs';\nimport '../MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { getBoxMod } from './get-box-mod/get-box-mod.mjs';\nimport { getBoxStyle } from './get-box-style/get-box-style.mjs';\nimport { extractStyleProps } from './style-props/extract-style-props/extract-style-props.mjs';\nimport { STYlE_PROPS_DATA } from './style-props/style-props-data.mjs';\nimport { parseStyleProps } from './style-props/parse-style-props/parse-style-props.mjs';\nimport { useRandomClassName } from './use-random-classname/use-random-classname.mjs';\nconst _Box = forwardRef((_ref, ref) => {\n  let {\n    component,\n    style,\n    __vars,\n    className,\n    variant,\n    mod,\n    size,\n    hiddenFrom,\n    visibleFrom,\n    lightHidden,\n    darkHidden,\n    renderRoot,\n    ...others\n  } = _ref;\n  const theme = useMantineTheme();\n  const Element = component || \"div\";\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const responsiveClassName = useRandomClassName();\n  const parsedStyleProps = parseStyleProps({\n    styleProps,\n    theme,\n    data: STYlE_PROPS_DATA\n  });\n  const props = {\n    ref,\n    style: getBoxStyle({\n      theme,\n      style,\n      vars: __vars,\n      styleProps: parsedStyleProps.inlineStyles\n    }),\n    className: cx(className, {\n      [responsiveClassName]: parsedStyleProps.hasResponsiveStyles,\n      \"mantine-light-hidden\": lightHidden,\n      \"mantine-dark-hidden\": darkHidden,\n      [\"mantine-hidden-from-\".concat(hiddenFrom)]: hiddenFrom,\n      [\"mantine-visible-from-\".concat(visibleFrom)]: visibleFrom\n    }),\n    \"data-variant\": variant,\n    \"data-size\": isNumberLike(size) ? void 0 : size || void 0,\n    ...getBoxMod(mod),\n    ...rest\n  };\n  return /* @__PURE__ */React.createElement(React.Fragment, null, parsedStyleProps.hasResponsiveStyles && /* @__PURE__ */React.createElement(InlineStyles, {\n    selector: \".\".concat(responsiveClassName),\n    styles: parsedStyleProps.styles,\n    media: parsedStyleProps.media\n  }), typeof renderRoot === \"function\" ? renderRoot(props) : /* @__PURE__ */React.createElement(Element, {\n    ...props\n  }));\n});\n_Box.displayName = \"@mantine/core/Box\";\nconst Box = createPolymorphicComponent(_Box);\nexport { Box };","map":null,"metadata":{},"sourceType":"module"}