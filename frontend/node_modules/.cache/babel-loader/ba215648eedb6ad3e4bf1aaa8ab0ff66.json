{"ast":null,"code":"'use client';\n\nimport { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { useDidUpdate, mergeRefs } from '@mantine/hooks';\nfunction getAutoHeightDuration(height) {\n  if (!height || typeof height === \"string\") {\n    return 0;\n  }\n  const constant = height / 36;\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}\nfunction getElementHeight(el) {\n  return (el === null || el === void 0 ? void 0 : el.current) ? el.current.scrollHeight : \"auto\";\n}\nconst raf = typeof window !== \"undefined\" && window.requestAnimationFrame;\nfunction useCollapse(_ref) {\n  let {\n    transitionDuration,\n    transitionTimingFunction = \"ease\",\n    onTransitionEnd = () => {},\n    opened\n  } = _ref;\n  const el = useRef(null);\n  const collapsedHeight = 0;\n  const collapsedStyles = {\n    display: \"none\",\n    height: 0,\n    overflow: \"hidden\"\n  };\n  const [styles, setStylesRaw] = useState(opened ? {} : collapsedStyles);\n  const setStyles = newStyles => {\n    flushSync(() => setStylesRaw(newStyles));\n  };\n  const mergeStyles = newStyles => {\n    setStyles(oldStyles => ({\n      ...oldStyles,\n      ...newStyles\n    }));\n  };\n  function getTransitionStyles(height) {\n    const _duration = transitionDuration || getAutoHeightDuration(height);\n    return {\n      transition: \"height \".concat(_duration, \"ms \").concat(transitionTimingFunction, \", opacity \").concat(_duration, \"ms \").concat(transitionTimingFunction)\n    };\n  }\n  useDidUpdate(() => {\n    if (typeof raf === \"function\") {\n      if (opened) {\n        raf(() => {\n          mergeStyles({\n            willChange: \"height\",\n            display: \"block\",\n            overflow: \"hidden\"\n          });\n          raf(() => {\n            const height = getElementHeight(el);\n            mergeStyles({\n              ...getTransitionStyles(height),\n              height\n            });\n          });\n        });\n      } else {\n        raf(() => {\n          const height = getElementHeight(el);\n          mergeStyles({\n            ...getTransitionStyles(height),\n            willChange: \"height\",\n            height\n          });\n          raf(() => mergeStyles({\n            height: collapsedHeight,\n            overflow: \"hidden\"\n          }));\n        });\n      }\n    }\n  }, [opened]);\n  const handleTransitionEnd = e => {\n    if (e.target !== el.current || e.propertyName !== \"height\") {\n      return;\n    }\n    if (opened) {\n      const height = getElementHeight(el);\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        mergeStyles({\n          height\n        });\n      }\n      onTransitionEnd();\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onTransitionEnd();\n    }\n  };\n  function getCollapseProps() {\n    let {\n      style = {},\n      refKey = \"ref\",\n      ...rest\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const theirRef = rest[refKey];\n    return {\n      \"aria-hidden\": !opened,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: handleTransitionEnd,\n      style: {\n        boxSizing: \"border-box\",\n        ...style,\n        ...styles\n      }\n    };\n  }\n  return getCollapseProps;\n}\nexport { getElementHeight, useCollapse };","map":null,"metadata":{},"sourceType":"module"}