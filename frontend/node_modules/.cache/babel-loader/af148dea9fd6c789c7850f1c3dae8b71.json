{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useComboboxContext } from '../Combobox.context.mjs';\nfunction useComboboxTargetProps(_ref) {\n  let {\n    onKeyDown,\n    withKeyboardNavigation,\n    withAriaAttributes,\n    withExpandedAttribute,\n    targetType\n  } = _ref;\n  const ctx = useComboboxContext();\n  const [selectedOptionId, setSelectedOptionId] = useState(null);\n  const handleKeyDown = event => {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n    if (ctx.readOnly) {\n      return;\n    }\n    if (withKeyboardNavigation) {\n      if (event.nativeEvent.code === \"ArrowDown\") {\n        event.preventDefault();\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown(\"keyboard\");\n          setSelectedOptionId(ctx.store.selectActiveOption());\n        } else {\n          setSelectedOptionId(ctx.store.selectNextOption());\n        }\n      }\n      if (event.nativeEvent.code === \"ArrowUp\") {\n        event.preventDefault();\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown(\"keyboard\");\n          setSelectedOptionId(ctx.store.selectActiveOption());\n        } else {\n          setSelectedOptionId(ctx.store.selectPreviousOption());\n        }\n      }\n      if (event.nativeEvent.code === \"Enter\" || event.nativeEvent.code === \"NumpadEnter\") {\n        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();\n        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {\n          event.preventDefault();\n          ctx.store.clickSelectedOption();\n        } else if (targetType === \"button\") {\n          event.preventDefault();\n          ctx.store.openDropdown(\"keyboard\");\n        }\n      }\n      if (event.nativeEvent.code === \"Escape\") {\n        ctx.store.closeDropdown(\"keyboard\");\n      }\n      if (event.nativeEvent.code === \"Space\") {\n        if (targetType === \"button\") {\n          event.preventDefault();\n          ctx.store.toggleDropdown(\"keyboard\");\n        }\n      }\n    }\n  };\n  const ariaAttributes = withAriaAttributes ? {\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened) || void 0,\n    \"aria-controls\": ctx.store.listId,\n    \"aria-activedescendant\": ctx.store.dropdownOpened ? selectedOptionId || void 0 : void 0,\n    autoComplete: \"off\",\n    \"data-expanded\": ctx.store.dropdownOpened ? true : void 0\n  } : {};\n  return {\n    ...ariaAttributes,\n    onKeyDown: handleKeyDown\n  };\n}\nexport { useComboboxTargetProps };","map":null,"metadata":{},"sourceType":"module"}