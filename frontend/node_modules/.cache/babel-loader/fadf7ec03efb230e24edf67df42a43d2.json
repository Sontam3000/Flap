{"ast":null,"code":"'use client';\n\nimport React from 'react';\nconst getScript = _ref => {\n  let {\n    defaultColorScheme,\n    localStorageKey,\n    forceColorScheme\n  } = _ref;\n  return forceColorScheme ? \"document.documentElement.setAttribute(\\\"data-mantine-color-scheme\\\", '\".concat(forceColorScheme, \"');\") : \"try {\\n  var _colorScheme = window.localStorage.getItem(\\\"\".concat(localStorageKey, \"\\\");\\n  var colorScheme = _colorScheme === \\\"light\\\" || _colorScheme === \\\"dark\\\" || _colorScheme === \\\"auto\\\" ? _colorScheme : \\\"\").concat(defaultColorScheme, \"\\\";\\n  var computedColorScheme = colorScheme !== \\\"auto\\\" ? colorScheme : window.matchMedia(\\\"(prefers-color-scheme: dark)\\\").matches ? \\\"dark\\\" : \\\"light\\\";\\n  document.documentElement.setAttribute(\\\"data-mantine-color-scheme\\\", computedColorScheme);\\n} catch (e) {}\\n\");\n};\nfunction ColorSchemeScript(_ref2) {\n  let {\n    defaultColorScheme = \"light\",\n    localStorageKey = \"mantine-color-scheme-value\",\n    forceColorScheme,\n    ...others\n  } = _ref2;\n  const _defaultColorScheme = [\"light\", \"dark\", \"auto\"].includes(defaultColorScheme) ? defaultColorScheme : \"light\";\n  return /* @__PURE__ */React.createElement(\"script\", {\n    ...others,\n    \"data-mantine-script\": true,\n    dangerouslySetInnerHTML: {\n      __html: getScript({\n        defaultColorScheme: _defaultColorScheme,\n        localStorageKey,\n        forceColorScheme\n      })\n    }\n  });\n}\nexport { ColorSchemeScript };","map":null,"metadata":{},"sourceType":"module"}