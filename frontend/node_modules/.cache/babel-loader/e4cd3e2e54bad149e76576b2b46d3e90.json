{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar ReactPlayer_exports = {};\n__export(ReactPlayer_exports, {\n  createReactPlayer: () => createReactPlayer\n});\nmodule.exports = __toCommonJS(ReactPlayer_exports);\nvar import_react = __toESM(require(\"react\"));\nvar import_deepmerge = __toESM(require(\"deepmerge\"));\nvar import_memoize_one = __toESM(require(\"memoize-one\"));\nvar import_react_fast_compare = __toESM(require(\"react-fast-compare\"));\nvar import_props = require(\"./props\");\nvar import_utils = require(\"./utils\");\nvar import_Player = __toESM(require(\"./Player\"));\nconst Preview = (0, import_utils.lazy)(() => import( /* webpackChunkName: 'reactPlayerPreview' */\n\"./Preview\"));\nconst IS_BROWSER = typeof window !== \"undefined\" && window.document;\nconst IS_GLOBAL = typeof global !== \"undefined\" && global.window && global.window.document;\nconst SUPPORTED_PROPS = Object.keys(import_props.propTypes);\nconst UniversalSuspense = IS_BROWSER || IS_GLOBAL ? import_react.Suspense : () => null;\nconst customPlayers = [];\nconst createReactPlayer = (players, fallback) => {\n  var _a;\n  return _a = class extends import_react.Component {\n    constructor() {\n      var _this;\n      super(...arguments);\n      _this = this;\n      __publicField(this, \"state\", {\n        showPreview: !!this.props.light\n      });\n      // Use references, as refs is used by React\n      __publicField(this, \"references\", {\n        wrapper: wrapper => {\n          this.wrapper = wrapper;\n        },\n        player: player => {\n          this.player = player;\n        }\n      });\n      __publicField(this, \"handleClickPreview\", e => {\n        this.setState({\n          showPreview: false\n        });\n        this.props.onClickPreview(e);\n      });\n      __publicField(this, \"showPreview\", () => {\n        this.setState({\n          showPreview: true\n        });\n      });\n      __publicField(this, \"getDuration\", () => {\n        if (!this.player) return null;\n        return this.player.getDuration();\n      });\n      __publicField(this, \"getCurrentTime\", () => {\n        if (!this.player) return null;\n        return this.player.getCurrentTime();\n      });\n      __publicField(this, \"getSecondsLoaded\", () => {\n        if (!this.player) return null;\n        return this.player.getSecondsLoaded();\n      });\n      __publicField(this, \"getInternalPlayer\", function () {\n        let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"player\";\n        if (!_this.player) return null;\n        return _this.player.getInternalPlayer(key);\n      });\n      __publicField(this, \"seekTo\", (fraction, type, keepPlaying) => {\n        if (!this.player) return null;\n        this.player.seekTo(fraction, type, keepPlaying);\n      });\n      __publicField(this, \"handleReady\", () => {\n        this.props.onReady(this);\n      });\n      __publicField(this, \"getActivePlayer\", (0, import_memoize_one.default)(url => {\n        for (const player of [...customPlayers, ...players]) {\n          if (player.canPlay(url)) {\n            return player;\n          }\n        }\n        if (fallback) {\n          return fallback;\n        }\n        return null;\n      }));\n      __publicField(this, \"getConfig\", (0, import_memoize_one.default)((url, key) => {\n        const {\n          config\n        } = this.props;\n        return import_deepmerge.default.all([import_props.defaultProps.config, import_props.defaultProps.config[key] || {}, config, config[key] || {}]);\n      }));\n      __publicField(this, \"getAttributes\", (0, import_memoize_one.default)(url => {\n        return (0, import_utils.omit)(this.props, SUPPORTED_PROPS);\n      }));\n      __publicField(this, \"renderActivePlayer\", url => {\n        if (!url) return null;\n        const player = this.getActivePlayer(url);\n        if (!player) return null;\n        const config = this.getConfig(url, player.key);\n        return /* @__PURE__ */import_react.default.createElement(import_Player.default, {\n          ...this.props,\n          key: player.key,\n          ref: this.references.player,\n          config,\n          activePlayer: player.lazyPlayer || player,\n          onReady: this.handleReady\n        });\n      });\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n      return !(0, import_react_fast_compare.default)(this.props, nextProps) || !(0, import_react_fast_compare.default)(this.state, nextState);\n    }\n    componentDidUpdate(prevProps) {\n      const {\n        light\n      } = this.props;\n      if (!prevProps.light && light) {\n        this.setState({\n          showPreview: true\n        });\n      }\n      if (prevProps.light && !light) {\n        this.setState({\n          showPreview: false\n        });\n      }\n    }\n    renderPreview(url) {\n      if (!url) return null;\n      const {\n        light,\n        playIcon,\n        previewTabIndex,\n        oEmbedUrl\n      } = this.props;\n      return /* @__PURE__ */import_react.default.createElement(Preview, {\n        url,\n        light,\n        playIcon,\n        previewTabIndex,\n        oEmbedUrl,\n        onClick: this.handleClickPreview\n      });\n    }\n    render() {\n      const {\n        url,\n        style,\n        width,\n        height,\n        fallback: fallback2,\n        wrapper: Wrapper\n      } = this.props;\n      const {\n        showPreview\n      } = this.state;\n      const attributes = this.getAttributes(url);\n      const wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : void 0;\n      return /* @__PURE__ */import_react.default.createElement(Wrapper, {\n        ref: wrapperRef,\n        style: {\n          ...style,\n          width,\n          height\n        },\n        ...attributes\n      }, /* @__PURE__ */import_react.default.createElement(UniversalSuspense, {\n        fallback: fallback2\n      }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n    }\n  }, __publicField(_a, \"displayName\", \"ReactPlayer\"), __publicField(_a, \"propTypes\", import_props.propTypes), __publicField(_a, \"defaultProps\", import_props.defaultProps), __publicField(_a, \"addCustomPlayer\", player => {\n    customPlayers.push(player);\n  }), __publicField(_a, \"removeCustomPlayers\", () => {\n    customPlayers.length = 0;\n  }), __publicField(_a, \"canPlay\", url => {\n    for (const Player2 of [...customPlayers, ...players]) {\n      if (Player2.canPlay(url)) {\n        return true;\n      }\n    }\n    return false;\n  }), __publicField(_a, \"canEnablePIP\", url => {\n    for (const Player2 of [...customPlayers, ...players]) {\n      if (Player2.canEnablePIP && Player2.canEnablePIP(url)) {\n        return true;\n      }\n    }\n    return false;\n  }), _a;\n};","map":null,"metadata":{},"sourceType":"script"}