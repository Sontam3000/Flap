{"ast":null,"code":"'use client';\n\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport { useIsomorphicEffect } from '@mantine/hooks';\nfunction setColorSchemeAttribute(colorScheme, getRootElement) {\n  var _getRootElement;\n  const computedColorScheme = colorScheme !== \"auto\" ? colorScheme : window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  (_getRootElement = getRootElement()) === null || _getRootElement === void 0 ? void 0 : _getRootElement.setAttribute(\"data-mantine-color-scheme\", computedColorScheme);\n}\nfunction useProviderColorScheme(_ref) {\n  let {\n    manager,\n    defaultColorScheme,\n    getRootElement,\n    forceColorScheme\n  } = _ref;\n  const media = useRef();\n  const [value, setValue] = useState(() => manager.get(defaultColorScheme));\n  const colorSchemeValue = forceColorScheme || value;\n  const setColorScheme = useCallback(colorScheme => {\n    if (!forceColorScheme) {\n      setColorSchemeAttribute(colorScheme, getRootElement);\n      setValue(colorScheme);\n      manager.set(colorScheme);\n    }\n  }, [manager.set, colorSchemeValue, forceColorScheme]);\n  const clearColorScheme = useCallback(() => {\n    setValue(defaultColorScheme);\n    setColorSchemeAttribute(defaultColorScheme, getRootElement);\n    manager.clear();\n  }, [manager.clear, defaultColorScheme]);\n  useEffect(() => {\n    manager.subscribe(setColorScheme);\n    return manager.unsubscribe;\n  }, [manager.subscribe, manager.unsubscribe]);\n  useIsomorphicEffect(() => {\n    setColorSchemeAttribute(manager.get(defaultColorScheme), getRootElement);\n  }, []);\n  useEffect(() => {\n    var _media$current;\n    if (forceColorScheme) {\n      setColorSchemeAttribute(forceColorScheme, getRootElement);\n      return () => {};\n    }\n    if (forceColorScheme === void 0) {\n      setColorSchemeAttribute(value, getRootElement);\n    }\n    media.current = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const listener = event => {\n      if (value === \"auto\") {\n        setColorSchemeAttribute(event.matches ? \"dark\" : \"light\", getRootElement);\n      }\n    };\n    (_media$current = media.current) === null || _media$current === void 0 ? void 0 : _media$current.addEventListener(\"change\", listener);\n    return () => {\n      var _media$current2;\n      return (_media$current2 = media.current) === null || _media$current2 === void 0 ? void 0 : _media$current2.removeEventListener(\"change\", listener);\n    };\n  }, [value, forceColorScheme]);\n  return {\n    colorScheme: colorSchemeValue,\n    setColorScheme,\n    clearColorScheme\n  };\n}\nexport { useProviderColorScheme };","map":null,"metadata":{},"sourceType":"module"}