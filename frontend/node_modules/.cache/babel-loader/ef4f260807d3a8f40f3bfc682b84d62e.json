{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect, useCallback } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getNextIndex, getPreviousIndex, getFirstIndex } from './get-index/get-virtualized-index.mjs';\nfunction useVirtualizedCombobox() {\n  let {\n    defaultOpened,\n    opened,\n    onOpenedChange,\n    onDropdownClose,\n    onDropdownOpen,\n    loop = true,\n    totalOptionsCount,\n    isOptionDisabled = () => false,\n    getOptionId,\n    selectedOptionIndex,\n    setSelectedOptionIndex,\n    activeOptionIndex,\n    onSelectedOptionSubmit\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    totalOptionsCount: 0,\n    getOptionId: () => null,\n    selectedOptionIndex: 1,\n    setSelectedOptionIndex: () => {},\n    onSelectedOptionSubmit: () => {}\n  };\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange\n  });\n  const listId = useRef(null);\n  const searchRef = useRef(null);\n  const targetRef = useRef(null);\n  const focusSearchTimeout = useRef(-1);\n  const focusTargetTimeout = useRef(-1);\n  const openDropdown = () => {\n    if (!dropdownOpened) {\n      setDropdownOpened(true);\n      onDropdownOpen === null || onDropdownOpen === void 0 ? void 0 : onDropdownOpen();\n    }\n  };\n  const closeDropdown = () => {\n    if (dropdownOpened) {\n      setDropdownOpened(false);\n      onDropdownClose === null || onDropdownClose === void 0 ? void 0 : onDropdownClose();\n    }\n  };\n  const toggleDropdown = () => {\n    if (dropdownOpened) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n  const selectOption = index => {\n    const nextIndex = index >= totalOptionsCount ? 0 : index < 0 ? totalOptionsCount - 1 : index;\n    setSelectedOptionIndex(nextIndex);\n    return getOptionId(nextIndex);\n  };\n  const selectActiveOption = () => selectOption(activeOptionIndex !== null && activeOptionIndex !== void 0 ? activeOptionIndex : 0);\n  const selectNextOption = () => selectOption(getNextIndex({\n    currentIndex: selectedOptionIndex,\n    isOptionDisabled,\n    totalOptionsCount,\n    loop\n  }));\n  const selectPreviousOption = () => selectOption(getPreviousIndex({\n    currentIndex: selectedOptionIndex,\n    isOptionDisabled,\n    totalOptionsCount,\n    loop\n  }));\n  const selectFirstOption = () => selectOption(getFirstIndex({\n    isOptionDisabled,\n    totalOptionsCount\n  }));\n  const resetSelectedOption = () => {\n    setSelectedOptionIndex(-1);\n  };\n  const clickSelectedOption = () => {\n    onSelectedOptionSubmit === null || onSelectedOptionSubmit === void 0 ? void 0 : onSelectedOptionSubmit(selectedOptionIndex);\n  };\n  const setListId = id => {\n    listId.current = id;\n  };\n  const focusSearchInput = () => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current.focus(), 0);\n  };\n  const focusTarget = () => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current.focus(), 0);\n  };\n  useEffect(() => () => {\n    window.clearTimeout(focusSearchTimeout.current);\n    window.clearTimeout(focusTargetTimeout.current);\n  }, []);\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex, []);\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n    selectedOptionIndex,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex: () => {},\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n    searchRef,\n    focusSearchInput,\n    targetRef,\n    focusTarget\n  };\n}\nexport { useVirtualizedCombobox };","map":null,"metadata":{},"sourceType":"module"}