{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { createScopedKeydownHandler } from '../../../core/utils/create-scoped-keydown-handler/create-scoped-keydown-handler.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { UnstyledButton } from '../../UnstyledButton/UnstyledButton.mjs';\nimport { useTabsContext } from '../Tabs.context.mjs';\nimport classes from '../Tabs.module.css.mjs';\nconst defaultProps = {};\nconst TabsTab = factory((_props, ref) => {\n  const props = useProps(\"TabsTab\", defaultProps, _props);\n  const {\n    className,\n    children,\n    rightSection,\n    leftSection,\n    value,\n    onClick,\n    onKeyDown,\n    disabled,\n    color,\n    style,\n    classNames,\n    styles,\n    vars,\n    mod,\n    ...others\n  } = props;\n  const theme = useMantineTheme();\n  const {\n    dir\n  } = useDirection();\n  const ctx = useTabsContext();\n  const active = value === ctx.value;\n  const activateTab = event => {\n    ctx.onChange(ctx.allowTabDeactivation ? value === ctx.value ? null : value : value);\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n  };\n  const stylesApiProps = {\n    classNames,\n    styles,\n    props\n  };\n  return /* @__PURE__ */React.createElement(UnstyledButton, {\n    ...others,\n    ...ctx.getStyles(\"tab\", {\n      className,\n      style,\n      variant: ctx.variant,\n      ...stylesApiProps\n    }),\n    disabled,\n    unstyled: ctx.unstyled,\n    variant: ctx.variant,\n    mod: [{\n      active,\n      disabled,\n      orientation: ctx.orientation,\n      inverted: ctx.inverted,\n      placement: ctx.orientation === \"vertical\" && ctx.placement\n    }, mod],\n    ref,\n    role: \"tab\",\n    id: ctx.getTabId(value),\n    \"aria-selected\": active,\n    tabIndex: active || ctx.value === null ? 0 : -1,\n    \"aria-controls\": ctx.getPanelId(value),\n    onClick: activateTab,\n    __vars: {\n      \"--tabs-color\": color ? getThemeColor(color, theme) : void 0\n    },\n    onKeyDown: createScopedKeydownHandler({\n      siblingSelector: '[role=\"tab\"]',\n      parentSelector: '[role=\"tablist\"]',\n      activateOnFocus: ctx.activateTabWithKeyboard,\n      loop: ctx.loop,\n      orientation: ctx.orientation || \"horizontal\",\n      dir,\n      onKeyDown\n    })\n  }, leftSection && /* @__PURE__ */React.createElement(\"span\", {\n    ...ctx.getStyles(\"tabSection\", stylesApiProps),\n    \"data-position\": \"left\"\n  }, leftSection), children && /* @__PURE__ */React.createElement(\"span\", {\n    ...ctx.getStyles(\"tabLabel\", stylesApiProps)\n  }, children), rightSection && /* @__PURE__ */React.createElement(\"span\", {\n    ...ctx.getStyles(\"tabSection\", stylesApiProps),\n    \"data-position\": \"right\"\n  }, rightSection));\n});\nTabsTab.classes = classes;\nTabsTab.displayName = \"@mantine/core/TabsTab\";\nexport { TabsTab };","map":null,"metadata":{},"sourceType":"module"}