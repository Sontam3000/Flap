{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { TableTd, TableTh, TableTr, TableThead, TableTbody, TableTfoot, TableCaption } from './Table.components.mjs';\nimport { TableProvider } from './Table.context.mjs';\nimport { TableDataRenderer } from './TableDataRenderer.mjs';\nimport { TableScrollContainer } from './TableScrollContainer.mjs';\nimport classes from './Table.module.css.mjs';\nconst defaultProps = {\n  withRowBorders: true,\n  verticalSpacing: 7\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    layout,\n    captionSide,\n    horizontalSpacing,\n    verticalSpacing,\n    borderColor,\n    stripedColor,\n    highlightOnHoverColor,\n    striped,\n    highlightOnHover,\n    stickyHeaderOffset,\n    stickyHeader\n  } = _ref;\n  return {\n    table: {\n      \"--table-layout\": layout,\n      \"--table-caption-side\": captionSide,\n      \"--table-horizontal-spacing\": getSpacing(horizontalSpacing),\n      \"--table-vertical-spacing\": getSpacing(verticalSpacing),\n      \"--table-border-color\": borderColor ? getThemeColor(borderColor, theme) : void 0,\n      \"--table-striped-color\": striped && stripedColor ? getThemeColor(stripedColor, theme) : void 0,\n      \"--table-highlight-on-hover-color\": highlightOnHover && highlightOnHoverColor ? getThemeColor(highlightOnHoverColor, theme) : void 0,\n      \"--table-sticky-header-offset\": stickyHeader ? rem(stickyHeaderOffset) : void 0\n    }\n  };\n});\nconst Table = factory((_props, ref) => {\n  const props = useProps(\"Table\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    horizontalSpacing,\n    verticalSpacing,\n    captionSide,\n    stripedColor,\n    highlightOnHoverColor,\n    striped,\n    highlightOnHover,\n    withColumnBorders,\n    withRowBorders,\n    withTableBorder,\n    borderColor,\n    layout,\n    variant,\n    data,\n    children,\n    stickyHeader,\n    stickyHeaderOffset,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Table\",\n    props,\n    className,\n    style,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"table\",\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */React.createElement(TableProvider, {\n    value: {\n      getStyles,\n      stickyHeader,\n      striped: striped === true ? \"odd\" : striped || void 0,\n      highlightOnHover,\n      withColumnBorders,\n      withRowBorders,\n      captionSide: captionSide || \"bottom\"\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    component: \"table\",\n    variant,\n    ref,\n    mod: [{\n      \"data-with-table-border\": withTableBorder\n    }, mod],\n    ...getStyles(\"table\"),\n    ...others\n  }, children || !!data && /* @__PURE__ */React.createElement(TableDataRenderer, {\n    data\n  })));\n});\nTable.classes = classes;\nTable.displayName = \"@mantine/core/Table\";\nTable.Td = TableTd;\nTable.Th = TableTh;\nTable.Tr = TableTr;\nTable.Thead = TableThead;\nTable.Tbody = TableTbody;\nTable.Tfoot = TableTfoot;\nTable.Caption = TableCaption;\nTable.ScrollContainer = TableScrollContainer;\nTable.DataRenderer = TableDataRenderer;\nexport { Table };","map":null,"metadata":{},"sourceType":"module"}