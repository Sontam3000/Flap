{"ast":null,"code":"'use client';\n\nimport React, { useState } from 'react';\nimport { useId, useElementSize } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Anchor } from '../Anchor/Anchor.mjs';\nimport classes from './Spoiler.module.css.mjs';\nconst defaultProps = {\n  maxHeight: 100,\n  initialState: false\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    transitionDuration\n  } = _ref;\n  return {\n    root: {\n      \"--spoiler-transition-duration\": transitionDuration !== void 0 ? \"\".concat(transitionDuration, \"ms\") : void 0\n    }\n  };\n});\nconst Spoiler = factory((_props, ref) => {\n  const props = useProps(\"Spoiler\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    initialState,\n    maxHeight,\n    hideLabel,\n    showLabel,\n    children,\n    controlRef,\n    transitionDuration,\n    id,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Spoiler\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const _id = useId(id);\n  const regionId = \"\".concat(_id, \"-region\");\n  const [show, setShowState] = useState(initialState);\n  const {\n    ref: contentRef,\n    height\n  } = useElementSize();\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n  const spoiler = spoilerMoreContent !== null && maxHeight < height;\n  return /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"root\"),\n    id: _id,\n    ref,\n    \"data-has-spoiler\": spoiler || void 0,\n    ...others\n  }, spoiler && /* @__PURE__ */React.createElement(Anchor, {\n    component: \"button\",\n    type: \"button\",\n    ref: controlRef,\n    onClick: () => setShowState(opened => !opened),\n    \"aria-expanded\": show,\n    \"aria-controls\": regionId,\n    ...getStyles(\"control\")\n  }, spoilerMoreContent), /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"content\", {\n      style: {\n        maxHeight: !show ? rem(maxHeight) : height ? rem(height) : void 0\n      }\n    }),\n    \"data-reduce-motion\": true,\n    role: \"region\",\n    id: regionId\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    ref: contentRef\n  }, children)));\n});\nSpoiler.classes = classes;\nSpoiler.displayName = \"@mantine/core/Spoiler\";\nexport { Spoiler };","map":null,"metadata":{},"sourceType":"module"}