{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nimport { useFloating, shift, getOverflowAncestors } from '@floating-ui/react';\nfunction useFloatingTooltip(_ref) {\n  let {\n    offset,\n    position\n  } = _ref;\n  const [opened, setOpened] = useState(false);\n  const boundaryRef = useRef();\n  const {\n    x,\n    y,\n    elements,\n    refs,\n    update,\n    placement\n  } = useFloating({\n    placement: position,\n    middleware: [shift({\n      crossAxis: true,\n      padding: 5,\n      rootBoundary: \"document\"\n    })]\n  });\n  const horizontalOffset = placement.includes(\"right\") ? offset : position.includes(\"left\") ? offset * -1 : 0;\n  const verticalOffset = placement.includes(\"bottom\") ? offset : position.includes(\"top\") ? offset * -1 : 0;\n  const handleMouseMove = useCallback(_ref2 => {\n    let {\n      clientX,\n      clientY\n    } = _ref2;\n    refs.setPositionReference({\n      getBoundingClientRect() {\n        return {\n          width: 0,\n          height: 0,\n          x: clientX,\n          y: clientY,\n          left: clientX + horizontalOffset,\n          top: clientY + verticalOffset,\n          right: clientX,\n          bottom: clientY\n        };\n      }\n    });\n  }, [elements.reference]);\n  useEffect(() => {\n    if (refs.floating.current) {\n      const boundary = boundaryRef.current;\n      boundary.addEventListener(\"mousemove\", handleMouseMove);\n      const parents = getOverflowAncestors(refs.floating.current);\n      parents.forEach(parent => {\n        parent.addEventListener(\"scroll\", update);\n      });\n      return () => {\n        boundary.removeEventListener(\"mousemove\", handleMouseMove);\n        parents.forEach(parent => {\n          parent.removeEventListener(\"scroll\", update);\n        });\n      };\n    }\n    return void 0;\n  }, [elements.reference, refs.floating.current, update, handleMouseMove, opened]);\n  return {\n    handleMouseMove,\n    x,\n    y,\n    opened,\n    setOpened,\n    boundaryRef,\n    floating: refs.setFloating\n  };\n}\nexport { useFloatingTooltip };","map":null,"metadata":{},"sourceType":"module"}